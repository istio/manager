// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/eds.proto

/*
Package envoy_api_v2 is a generated protocol buffer package.

It is generated from these files:
	api/eds.proto

It has these top-level messages:
	LbEndpoint
	LocalityLbEndpoints
	EndpointLoadMetricStats
	UpstreamLocalityStats
	ClusterStats
	LoadStatsRequest
	ClusterLoadAssignment
	LoadStatsResponse
*/
package envoy_api_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v22 "api"
import _ "api"
import envoy_api_v24 "api"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LbEndpoint struct {
	Endpoint *envoy_api_v22.Endpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// Optional health status when known and supplied by EDS server.
	HealthStatus envoy_api_v24.HealthStatus `protobuf:"varint,2,opt,name=health_status,json=healthStatus,enum=envoy.api.v2.HealthStatus" json:"health_status,omitempty"`
	// The endpoint metadata specifies values that may be used by the load
	// balancer to select endpoints in a cluster for a given request. The filter
	// name should be specified as "envoy.lb". An example boolean key-value pair
	// is "canary", providing the optional canary status of the upstream host.
	// This may be matched against in a route's ForwardAction metadata_match field
	// to subset the endpoints considered in cluster load balancing.
	// TODO(htuch: [V2-API-DIFF] Need to plumb this through Envoy and have
	// everywhere that canary is used be capable of working on metadata.
	Metadata *envoy_api_v22.Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	// The optional load balancing weight of the upstream host, in the range 1 -
	// 100. Envoy uses the load balancing weight in some of the built in load
	// balancers. The load balancing weight for an endpoint is divided by the sum
	// of the weights of all endpoints in the endpoint's locality to produce a
	// percentage of traffic for the endpoint. This percentage is then further
	// weighted by the endpoint's locality's load balancing weight from
	// LocalityLbEndpoints. If unspecified, each host is presumed to have equal
	// weight in a locality.
	LoadBalancingWeight *google_protobuf2.UInt32Value `protobuf:"bytes,4,opt,name=load_balancing_weight,json=loadBalancingWeight" json:"load_balancing_weight,omitempty"`
}

func (m *LbEndpoint) Reset()                    { *m = LbEndpoint{} }
func (m *LbEndpoint) String() string            { return proto.CompactTextString(m) }
func (*LbEndpoint) ProtoMessage()               {}
func (*LbEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LbEndpoint) GetEndpoint() *envoy_api_v22.Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *LbEndpoint) GetHealthStatus() envoy_api_v24.HealthStatus {
	if m != nil {
		return m.HealthStatus
	}
	return envoy_api_v24.HealthStatus_UNKNOWN
}

func (m *LbEndpoint) GetMetadata() *envoy_api_v22.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *LbEndpoint) GetLoadBalancingWeight() *google_protobuf2.UInt32Value {
	if m != nil {
		return m.LoadBalancingWeight
	}
	return nil
}

// All endpoints belonging to a Locality.
type LocalityLbEndpoints struct {
	Locality    *envoy_api_v22.Locality `protobuf:"bytes,1,opt,name=locality" json:"locality,omitempty"`
	LbEndpoints []*LbEndpoint           `protobuf:"bytes,2,rep,name=lb_endpoints,json=lbEndpoints" json:"lb_endpoints,omitempty"`
	// Optional: Per region/zone/sub_zone weight - range 1-100. The load balancing
	// weight for a locality is divided by the sum of the weights of all
	// localities to produce the effective percentage of traffic for the locality.
	// If unspecified, each locality is presumed to have equal weight in a
	// cluster.
	LoadBalancingWeight *google_protobuf2.UInt32Value `protobuf:"bytes,3,opt,name=load_balancing_weight,json=loadBalancingWeight" json:"load_balancing_weight,omitempty"`
}

func (m *LocalityLbEndpoints) Reset()                    { *m = LocalityLbEndpoints{} }
func (m *LocalityLbEndpoints) String() string            { return proto.CompactTextString(m) }
func (*LocalityLbEndpoints) ProtoMessage()               {}
func (*LocalityLbEndpoints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LocalityLbEndpoints) GetLocality() *envoy_api_v22.Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *LocalityLbEndpoints) GetLbEndpoints() []*LbEndpoint {
	if m != nil {
		return m.LbEndpoints
	}
	return nil
}

func (m *LocalityLbEndpoints) GetLoadBalancingWeight() *google_protobuf2.UInt32Value {
	if m != nil {
		return m.LoadBalancingWeight
	}
	return nil
}

// Example load report from a single request:
//
// [metric name, metric value]
// * cpu_seconds, 0.7
// * flash_utilization, 75
//
// When aggregating Envoy needs to count how many request's load reports
// included each metric type, so Envoy can account for requests that don't
// include that metric type. e.g.:
//
// [name, count, sum of values]
// * cpu_seconds, 10, 17.5
// * flash_utilization, 5, 375
type EndpointLoadMetricStats struct {
	// Name of the metric; may be empty.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Number of calls that finished and included this metric.
	NumRequestsFinishedWithMetric uint64 `protobuf:"varint,2,opt,name=num_requests_finished_with_metric,json=numRequestsFinishedWithMetric" json:"num_requests_finished_with_metric,omitempty"`
	// Sum of metric values across all calls that finished with this metric for
	// load_reporting_interval.
	TotalMetricValue float64 `protobuf:"fixed64,3,opt,name=total_metric_value,json=totalMetricValue" json:"total_metric_value,omitempty"`
}

func (m *EndpointLoadMetricStats) Reset()                    { *m = EndpointLoadMetricStats{} }
func (m *EndpointLoadMetricStats) String() string            { return proto.CompactTextString(m) }
func (*EndpointLoadMetricStats) ProtoMessage()               {}
func (*EndpointLoadMetricStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EndpointLoadMetricStats) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *EndpointLoadMetricStats) GetNumRequestsFinishedWithMetric() uint64 {
	if m != nil {
		return m.NumRequestsFinishedWithMetric
	}
	return 0
}

func (m *EndpointLoadMetricStats) GetTotalMetricValue() float64 {
	if m != nil {
		return m.TotalMetricValue
	}
	return 0
}

// These are stats Envoy reports to GLB every so often. Report frequency is
// defined by LoadAssignmentResponse.interval
// Stats per upstream region/zone and optionally per subzone
type UpstreamLocalityStats struct {
	// Name of zone, region and optionally endpoint group this metrics was
	// collected from. Zone and region names could be empty if unknown.
	Locality *envoy_api_v22.Locality `protobuf:"bytes,1,opt,name=locality" json:"locality,omitempty"`
	// The total number of requests sent by this Envoy since the last report. A
	// single HTTP or gRPC request or stream is counted as one request. A TCP
	// connection is also treated as one request. There is no explicit
	// total_requests field below for a locality, but it may be inferred from:
	//   total_requests = total_successful_requests + total_requests_in_progress +
	//       total_error_requests
	// The total number of requests successfully completed by the endpoints in the
	// locality. These include non-5xx responses for HTTP, where errors
	// originate at the client and the endpoint responded successfuly. For gRPC,
	// the grpc-status values are those not covered by total_error_requests below.
	TotalSuccessfulRequests uint64 `protobuf:"varint,2,opt,name=total_successful_requests,json=totalSuccessfulRequests" json:"total_successful_requests,omitempty"`
	// The total number of unfinished requests
	TotalRequestsInProgress uint64 `protobuf:"varint,3,opt,name=total_requests_in_progress,json=totalRequestsInProgress" json:"total_requests_in_progress,omitempty"`
	// The total number of requests that failed due to errors at the endpoint.
	// For HTTP these are responses with 5xx status codes and for gRPC the
	// grpc-status values {DeadlineExceeded, Unimplemented, Internal,
	// Unavailable, Unknown, DataLoss}.
	TotalErrorRequests uint64 `protobuf:"varint,4,opt,name=total_error_requests,json=totalErrorRequests" json:"total_error_requests,omitempty"`
	// Stats for multi-dimensional load balancing.
	LoadMetricStats []*EndpointLoadMetricStats `protobuf:"bytes,5,rep,name=load_metric_stats,json=loadMetricStats" json:"load_metric_stats,omitempty"`
}

func (m *UpstreamLocalityStats) Reset()                    { *m = UpstreamLocalityStats{} }
func (m *UpstreamLocalityStats) String() string            { return proto.CompactTextString(m) }
func (*UpstreamLocalityStats) ProtoMessage()               {}
func (*UpstreamLocalityStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpstreamLocalityStats) GetLocality() *envoy_api_v22.Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *UpstreamLocalityStats) GetTotalSuccessfulRequests() uint64 {
	if m != nil {
		return m.TotalSuccessfulRequests
	}
	return 0
}

func (m *UpstreamLocalityStats) GetTotalRequestsInProgress() uint64 {
	if m != nil {
		return m.TotalRequestsInProgress
	}
	return 0
}

func (m *UpstreamLocalityStats) GetTotalErrorRequests() uint64 {
	if m != nil {
		return m.TotalErrorRequests
	}
	return 0
}

func (m *UpstreamLocalityStats) GetLoadMetricStats() []*EndpointLoadMetricStats {
	if m != nil {
		return m.LoadMetricStats
	}
	return nil
}

// Per cluster stats
type ClusterStats struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// Need at least one.
	UpstreamLocalityStats []*UpstreamLocalityStats `protobuf:"bytes,2,rep,name=upstream_locality_stats,json=upstreamLocalityStats" json:"upstream_locality_stats,omitempty"`
	// Cluster-level stats such as total_successful_requests may be computed by
	// summing upstream_locality_stats. In addition, below there are additional
	// cluster-wide stats. The following total_requests equality holds at the
	// cluster-level:
	//   total_requests = sum_locality(total_successful_requests) +
	//       sum_locality(total_requests_in_progress) +
	//       sum_locality(total_error_requests) + total_dropped_requests
	// The total number of dropped requests. This covers requests
	// deliberately dropped by the drop_overload policy and circuit breaking.
	TotalDroppedRequests uint64 `protobuf:"varint,3,opt,name=total_dropped_requests,json=totalDroppedRequests" json:"total_dropped_requests,omitempty"`
}

func (m *ClusterStats) Reset()                    { *m = ClusterStats{} }
func (m *ClusterStats) String() string            { return proto.CompactTextString(m) }
func (*ClusterStats) ProtoMessage()               {}
func (*ClusterStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ClusterStats) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterStats) GetUpstreamLocalityStats() []*UpstreamLocalityStats {
	if m != nil {
		return m.UpstreamLocalityStats
	}
	return nil
}

func (m *ClusterStats) GetTotalDroppedRequests() uint64 {
	if m != nil {
		return m.TotalDroppedRequests
	}
	return 0
}

type LoadStatsRequest struct {
	Node         *envoy_api_v22.Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	ClusterStats []*ClusterStats     `protobuf:"bytes,2,rep,name=cluster_stats,json=clusterStats" json:"cluster_stats,omitempty"`
}

func (m *LoadStatsRequest) Reset()                    { *m = LoadStatsRequest{} }
func (m *LoadStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadStatsRequest) ProtoMessage()               {}
func (*LoadStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoadStatsRequest) GetNode() *envoy_api_v22.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LoadStatsRequest) GetClusterStats() []*ClusterStats {
	if m != nil {
		return m.ClusterStats
	}
	return nil
}

// Each route from RDS will map to a single cluster or traffic split across
// clusters using weights expressed in the RDS WeightedCluster.
//
// With EDS, each cluster is treated independently from a LB perspective, with
// LB taking place between the Localities within a cluster and at a finer
// granularity between the hosts within a locality. For a given cluster, the
// effective weight of a host is its load_balancing_weight multiplied by the
// load_balancing_weight of its Locality.
type ClusterLoadAssignment struct {
	ClusterName string                 `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	Endpoints   []*LocalityLbEndpoints `protobuf:"bytes,2,rep,name=endpoints" json:"endpoints,omitempty"`
	// In the case where all endpoints for a particular zone/subzone are
	// unavailable/unhealthy, additional endpoints are given out for use in case
	// of catastrophic failure. They also have weights.
	FailoverEndpoints []*LocalityLbEndpoints        `protobuf:"bytes,3,rep,name=failover_endpoints,json=failoverEndpoints" json:"failover_endpoints,omitempty"`
	Policy            *ClusterLoadAssignment_Policy `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
}

func (m *ClusterLoadAssignment) Reset()                    { *m = ClusterLoadAssignment{} }
func (m *ClusterLoadAssignment) String() string            { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment) ProtoMessage()               {}
func (*ClusterLoadAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClusterLoadAssignment) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterLoadAssignment) GetEndpoints() []*LocalityLbEndpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ClusterLoadAssignment) GetFailoverEndpoints() []*LocalityLbEndpoints {
	if m != nil {
		return m.FailoverEndpoints
	}
	return nil
}

func (m *ClusterLoadAssignment) GetPolicy() *ClusterLoadAssignment_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ClusterLoadAssignment_Policy struct {
	// Percentage of traffic (0-100) that should be dropped. This
	// action allows protection of upstream hosts should they unable to
	// recover from an outage or should they be unable to autoscale and hence
	// overall incoming traffic volume need to be trimmed to protect them.
	// [V2-API-DIFF] This is known as maintenance mode in v1.
	DropOverload float64 `protobuf:"fixed64,1,opt,name=drop_overload,json=dropOverload" json:"drop_overload,omitempty"`
}

func (m *ClusterLoadAssignment_Policy) Reset()                    { *m = ClusterLoadAssignment_Policy{} }
func (m *ClusterLoadAssignment_Policy) String() string            { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment_Policy) ProtoMessage()               {}
func (*ClusterLoadAssignment_Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *ClusterLoadAssignment_Policy) GetDropOverload() float64 {
	if m != nil {
		return m.DropOverload
	}
	return 0
}

type LoadStatsResponse struct {
	// Clusters to report stats for.
	Clusters []string `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	// The default is 10 seconds.
	LoadReportingInterval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=load_reporting_interval,json=loadReportingInterval" json:"load_reporting_interval,omitempty"`
}

func (m *LoadStatsResponse) Reset()                    { *m = LoadStatsResponse{} }
func (m *LoadStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadStatsResponse) ProtoMessage()               {}
func (*LoadStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LoadStatsResponse) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *LoadStatsResponse) GetLoadReportingInterval() *google_protobuf.Duration {
	if m != nil {
		return m.LoadReportingInterval
	}
	return nil
}

func init() {
	proto.RegisterType((*LbEndpoint)(nil), "envoy.api.v2.LbEndpoint")
	proto.RegisterType((*LocalityLbEndpoints)(nil), "envoy.api.v2.LocalityLbEndpoints")
	proto.RegisterType((*EndpointLoadMetricStats)(nil), "envoy.api.v2.EndpointLoadMetricStats")
	proto.RegisterType((*UpstreamLocalityStats)(nil), "envoy.api.v2.UpstreamLocalityStats")
	proto.RegisterType((*ClusterStats)(nil), "envoy.api.v2.ClusterStats")
	proto.RegisterType((*LoadStatsRequest)(nil), "envoy.api.v2.LoadStatsRequest")
	proto.RegisterType((*ClusterLoadAssignment)(nil), "envoy.api.v2.ClusterLoadAssignment")
	proto.RegisterType((*ClusterLoadAssignment_Policy)(nil), "envoy.api.v2.ClusterLoadAssignment.Policy")
	proto.RegisterType((*LoadStatsResponse)(nil), "envoy.api.v2.LoadStatsResponse")
}

func init() { proto.RegisterFile("api/eds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xee, 0xca, 0xae, 0x11, 0x8f, 0x64, 0x27, 0xa6, 0x6b, 0x4b, 0x11, 0xdc, 0xc4, 0x56, 0xd0,
	0x42, 0x08, 0x5a, 0x39, 0x50, 0x7a, 0x72, 0x0e, 0x41, 0x53, 0x27, 0x88, 0x01, 0x27, 0x75, 0x68,
	0xa4, 0x29, 0xd0, 0xc3, 0x82, 0xda, 0xa5, 0xb5, 0x44, 0x57, 0xe4, 0x96, 0xe4, 0xca, 0x30, 0x7a,
	0xcb, 0xa5, 0x0f, 0xd0, 0x37, 0xe9, 0x13, 0xf4, 0xd0, 0x1e, 0x7a, 0xee, 0xa5, 0x0f, 0xd0, 0x07,
	0x29, 0xf8, 0xb7, 0x5a, 0x29, 0x32, 0x10, 0x04, 0xbd, 0x89, 0x33, 0xf3, 0x71, 0xe6, 0xfb, 0x66,
	0x38, 0x2b, 0xd8, 0x20, 0x05, 0x3b, 0xa4, 0xa9, 0x1a, 0x14, 0x52, 0x68, 0x81, 0x5a, 0x94, 0x4f,
	0xc5, 0xd5, 0x80, 0x14, 0x6c, 0x30, 0x1d, 0x76, 0x37, 0x8d, 0x73, 0x44, 0x14, 0x75, 0xde, 0xee,
	0xb6, 0x39, 0xa7, 0x4c, 0x25, 0x62, 0x4a, 0xe5, 0x95, 0x37, 0xee, 0x1a, 0x63, 0x46, 0x49, 0xae,
	0xb3, 0x38, 0xc9, 0x68, 0xf2, 0xa3, 0xb7, 0xef, 0x8d, 0x85, 0x18, 0xe7, 0xf4, 0xd0, 0xb8, 0x09,
	0xe7, 0x42, 0x13, 0xcd, 0x04, 0xf7, 0x89, 0xba, 0x77, 0xbc, 0xd7, 0x9e, 0x46, 0xe5, 0xc5, 0x61,
	0x5a, 0x4a, 0x1b, 0x70, 0x9d, 0xff, 0x52, 0x92, 0xa2, 0xa0, 0xd2, 0xe3, 0x7b, 0xbf, 0x34, 0x00,
	0x4e, 0x47, 0x4f, 0x79, 0x5a, 0x08, 0xc6, 0x35, 0x1a, 0xc2, 0x0d, 0xea, 0x7f, 0x77, 0xa2, 0xfd,
	0xa8, 0xdf, 0x1c, 0xee, 0x0e, 0xea, 0x54, 0x06, 0x21, 0x12, 0x57, 0x71, 0xe8, 0x31, 0x6c, 0xf8,
	0xb2, 0x95, 0x26, 0xba, 0x54, 0x9d, 0xc6, 0x7e, 0xd4, 0xdf, 0x1c, 0x76, 0xe7, 0x81, 0xcf, 0x6d,
	0xc8, 0xb9, 0x8d, 0xc0, 0xad, 0xac, 0x76, 0x32, 0x49, 0x27, 0x54, 0x93, 0x94, 0x68, 0xd2, 0x59,
	0x59, 0x96, 0xf4, 0x85, 0xf7, 0xe2, 0x2a, 0x0e, 0x9d, 0xc1, 0x4e, 0x2e, 0x48, 0x1a, 0x8f, 0x48,
	0x4e, 0x78, 0xc2, 0xf8, 0x38, 0xbe, 0xa4, 0x6c, 0x9c, 0xe9, 0xce, 0xaa, 0xbd, 0x60, 0x6f, 0xe0,
	0x78, 0x0f, 0x02, 0xef, 0xc1, 0xeb, 0x13, 0xae, 0x1f, 0x0e, 0xbf, 0x23, 0x79, 0x49, 0xf1, 0xb6,
	0x81, 0x3e, 0x09, 0xc8, 0x37, 0x16, 0xd8, 0xfb, 0x27, 0x82, 0xed, 0x53, 0x91, 0x90, 0x9c, 0xe9,
	0xab, 0x99, 0x22, 0xb6, 0xba, 0xdc, 0x9b, 0x97, 0x4b, 0x12, 0x40, 0xb8, 0x8a, 0x43, 0x8f, 0xa0,
	0x95, 0x8f, 0xe2, 0xa0, 0x90, 0x51, 0x64, 0xa5, 0xdf, 0x1c, 0x76, 0x16, 0x70, 0x55, 0x12, 0xdc,
	0xcc, 0x6b, 0x09, 0xaf, 0xa5, 0xb6, 0xf2, 0xa1, 0xd4, 0x7e, 0x8b, 0xa0, 0x1d, 0xee, 0x3f, 0x15,
	0x24, 0x7d, 0x41, 0xb5, 0x64, 0x89, 0x51, 0x5f, 0xa1, 0xbb, 0xd0, 0x9c, 0xd8, 0x63, 0xcc, 0xc9,
	0x84, 0x5a, 0x86, 0xeb, 0x18, 0x9c, 0xe9, 0x25, 0x99, 0x50, 0xf4, 0x1c, 0x0e, 0x78, 0x39, 0x89,
	0x25, 0xfd, 0xa9, 0xa4, 0x4a, 0xab, 0xf8, 0x82, 0x71, 0xa6, 0x32, 0x9a, 0xc6, 0x97, 0x4c, 0x67,
	0xb1, 0x0b, 0xb4, 0x2d, 0x5f, 0xc5, 0x9f, 0xf2, 0x72, 0x82, 0x7d, 0xdc, 0x33, 0x1f, 0xf6, 0x86,
	0xe9, 0xcc, 0xe5, 0x43, 0x5f, 0x00, 0xd2, 0x42, 0x93, 0xdc, 0x83, 0xe2, 0xa9, 0xa9, 0xd8, 0xb2,
	0x8a, 0xf0, 0x2d, 0xeb, 0x71, 0x81, 0x96, 0x49, 0xef, 0xaf, 0x06, 0xec, 0xbc, 0x2e, 0x94, 0x96,
	0x94, 0x4c, 0x82, 0xc4, 0xae, 0xe4, 0x0f, 0xe9, 0xc8, 0x11, 0xdc, 0x76, 0xb9, 0x55, 0x99, 0x24,
	0x54, 0xa9, 0x8b, 0x32, 0xaf, 0x28, 0xf9, 0xea, 0xdb, 0x36, 0xe0, 0xbc, 0xf2, 0x07, 0x26, 0xe8,
	0x11, 0x74, 0x1d, 0xb6, 0xd2, 0x80, 0xf1, 0xb8, 0x90, 0x62, 0x2c, 0xa9, 0x52, 0xb6, 0xfe, 0x00,
	0x0e, 0x90, 0x13, 0x7e, 0xe6, 0xdd, 0xe8, 0x01, 0x7c, 0xe2, 0xc0, 0x54, 0x4a, 0x21, 0x67, 0x39,
	0x57, 0x2d, 0xcc, 0x09, 0xf2, 0xd4, 0xb8, 0xaa, 0x74, 0xaf, 0x60, 0xcb, 0xf6, 0xdf, 0xab, 0x64,
	0x1e, 0x95, 0xea, 0x7c, 0x6c, 0x27, 0xe8, 0xb3, 0xe5, 0x8f, 0x71, 0xa1, 0xa7, 0xf8, 0x66, 0x3e,
	0x6f, 0xe8, 0xfd, 0x11, 0x41, 0xeb, 0x9b, 0xbc, 0x54, 0x9a, 0x4a, 0x27, 0xe1, 0x01, 0xb4, 0x12,
	0x77, 0xae, 0xb7, 0xbd, 0xe9, 0x6d, 0xb6, 0xef, 0x3f, 0x40, 0xbb, 0xf4, 0xf2, 0xc7, 0x41, 0x46,
	0x5f, 0x8c, 0x1b, 0xe7, 0x7b, 0xf3, 0xc5, 0x2c, 0xed, 0x15, 0xde, 0x29, 0x97, 0xb6, 0xf0, 0x2b,
	0xd8, 0x75, 0xaa, 0xa4, 0x52, 0x14, 0x05, 0x4d, 0x67, 0xba, 0x38, 0x39, 0x9d, 0x66, 0xc7, 0xce,
	0x19, 0x94, 0xe9, 0xfd, 0x0c, 0xb7, 0x0c, 0x55, 0x77, 0xb3, 0x33, 0xa2, 0xcf, 0x61, 0x95, 0x8b,
	0x94, 0xfa, 0x41, 0x40, 0xf3, 0x35, 0xbd, 0x14, 0x29, 0xc5, 0xd6, 0x6f, 0xb6, 0x54, 0x60, 0x5c,
	0x27, 0xb1, 0xb0, 0xa5, 0xea, 0x22, 0xe1, 0x20, 0x91, 0xd3, 0xf0, 0xf7, 0x06, 0xec, 0x78, 0xb7,
	0x29, 0xe2, 0x6b, 0xa5, 0xd8, 0x98, 0x4f, 0x28, 0xd7, 0xef, 0x23, 0xe6, 0x63, 0x58, 0x5f, 0xdc,
	0x06, 0x07, 0xcb, 0x67, 0xb6, 0xb6, 0x7a, 0xf0, 0x0c, 0x83, 0xce, 0x00, 0x5d, 0x10, 0x96, 0x9b,
	0x0f, 0x46, 0x6d, 0xaf, 0xac, 0xbc, 0xef, 0x4d, 0x5b, 0x01, 0x3c, 0x5b, 0x33, 0x4f, 0x60, 0xad,
	0x10, 0x39, 0x4b, 0xae, 0xfc, 0xca, 0xbc, 0xbf, 0x54, 0x89, 0x79, 0xaa, 0x83, 0x33, 0x8b, 0xc0,
	0x1e, 0xd9, 0xfd, 0x12, 0xd6, 0x9c, 0x05, 0xdd, 0x83, 0x0d, 0xd3, 0xca, 0xd8, 0xe4, 0x30, 0xd3,
	0x67, 0x45, 0x88, 0x70, 0xcb, 0x18, 0xbf, 0xf5, 0xb6, 0xde, 0xdb, 0x08, 0xb6, 0x6a, 0x0d, 0x54,
	0x85, 0xe0, 0x8a, 0xa2, 0x2e, 0xdc, 0xf0, 0x52, 0xa9, 0x4e, 0xb4, 0xbf, 0xd2, 0x5f, 0xc7, 0xd5,
	0x19, 0xbd, 0x82, 0xb6, 0x7d, 0x0b, 0x92, 0x16, 0x42, 0x6a, 0xb3, 0x0b, 0x19, 0xd7, 0x54, 0x4e,
	0x49, 0x6e, 0x1f, 0x6d, 0x73, 0x78, 0xfb, 0x9d, 0x6d, 0x78, 0xec, 0x3f, 0x80, 0xd8, 0x6e, 0x51,
	0x1c, 0x80, 0x27, 0x1e, 0x37, 0xfc, 0xb3, 0x01, 0x9d, 0xa0, 0xc2, 0x71, 0xf8, 0x06, 0x9f, 0x53,
	0x39, 0x65, 0x09, 0x45, 0xdf, 0xc3, 0xcd, 0x73, 0x3b, 0xae, 0x33, 0x9d, 0xee, 0xcc, 0xeb, 0x52,
	0x41, 0xfc, 0x00, 0x76, 0xef, 0x5e, 0xeb, 0x77, 0xfc, 0x7a, 0x1f, 0xf5, 0xa3, 0x07, 0x11, 0x2a,
	0x61, 0xf3, 0x19, 0xd5, 0x49, 0xf6, 0x3f, 0x5e, 0xdc, 0x7b, 0xfb, 0xf7, 0xbf, 0xbf, 0x36, 0xf6,
	0x7a, 0xed, 0xc3, 0xe9, 0x70, 0xf6, 0x77, 0xe2, 0xa8, 0x1a, 0x8f, 0xa3, 0xe8, 0xfe, 0x8c, 0x50,
	0xa5, 0xfb, 0x62, 0xde, 0xc5, 0x17, 0xb5, 0x98, 0xf7, 0x9d, 0x86, 0x39, 0x42, 0xa3, 0x35, 0xab,
	0xf8, 0xc3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0x9c, 0xbb, 0xf0, 0xfa, 0x08, 0x00, 0x00,
}
