// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/base.proto

/*
Package envoy_api_v2 is a generated protocol buffer package.

It is generated from these files:
	api/base.proto

It has these top-level messages:
	Locality
	Node
	Endpoint
	Metadata
	RuntimeUInt32
	HeaderValue
	HeaderValueOption
	ApiConfigSource
	AggregatedConfigSource
	ConfigSource
*/
package envoy_api_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v21 "api"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Envoy supports upstream priority routing both at the route and the virtual
// cluster level. The current priority implementation uses different connection
// pool and circuit breaking settings for each priority level. This means that
// even for HTTP/2 requests, two physical connections will be used to an
// upstream host. In the future Envoy will likely support true HTTP/2 priority
// over a single upstream connection.
type RoutingPriority int32

const (
	RoutingPriority_DEFAULT RoutingPriority = 0
	RoutingPriority_HIGH    RoutingPriority = 1
)

var RoutingPriority_name = map[int32]string{
	0: "DEFAULT",
	1: "HIGH",
}
var RoutingPriority_value = map[string]int32{
	"DEFAULT": 0,
	"HIGH":    1,
}

func (x RoutingPriority) String() string {
	return proto.EnumName(RoutingPriority_name, int32(x))
}
func (RoutingPriority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// HTTP request method
type RequestMethod int32

const (
	RequestMethod_METHOD_UNSPECIFIED RequestMethod = 0
	RequestMethod_GET                RequestMethod = 1
	RequestMethod_HEAD               RequestMethod = 2
	RequestMethod_POST               RequestMethod = 3
	RequestMethod_PUT                RequestMethod = 4
	RequestMethod_DELETE             RequestMethod = 5
	RequestMethod_CONNECT            RequestMethod = 6
	RequestMethod_OPTIONS            RequestMethod = 7
	RequestMethod_TRACE              RequestMethod = 8
)

var RequestMethod_name = map[int32]string{
	0: "METHOD_UNSPECIFIED",
	1: "GET",
	2: "HEAD",
	3: "POST",
	4: "PUT",
	5: "DELETE",
	6: "CONNECT",
	7: "OPTIONS",
	8: "TRACE",
}
var RequestMethod_value = map[string]int32{
	"METHOD_UNSPECIFIED": 0,
	"GET":                1,
	"HEAD":               2,
	"POST":               3,
	"PUT":                4,
	"DELETE":             5,
	"CONNECT":            6,
	"OPTIONS":            7,
	"TRACE":              8,
}

func (x RequestMethod) String() string {
	return proto.EnumName(RequestMethod_name, int32(x))
}
func (RequestMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// APIs may be fetched via either REST or gRPC.
type ApiConfigSource_ApiType int32

const (
	// REST legacy corresponds to the v1 API.
	ApiConfigSource_REST_LEGACY ApiConfigSource_ApiType = 0
	ApiConfigSource_REST        ApiConfigSource_ApiType = 1
	ApiConfigSource_GRPC        ApiConfigSource_ApiType = 2
)

var ApiConfigSource_ApiType_name = map[int32]string{
	0: "REST_LEGACY",
	1: "REST",
	2: "GRPC",
}
var ApiConfigSource_ApiType_value = map[string]int32{
	"REST_LEGACY": 0,
	"REST":        1,
	"GRPC":        2,
}

func (x ApiConfigSource_ApiType) String() string {
	return proto.EnumName(ApiConfigSource_ApiType_name, int32(x))
}
func (ApiConfigSource_ApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

// Identifies location of where either Envoy runs or where upstream hosts run.
type Locality struct {
	// Region this zone belongs to.
	Region string `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	// Availability Zone (AZ) in AWS, Zone in GCP.
	Zone string `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	// When used for locality of upstream hosts, this field further splits zone
	// into smaller chunks of sub_zones so they can be load balanced
	// independently
	SubZone string `protobuf:"bytes,3,opt,name=sub_zone,json=subZone" json:"sub_zone,omitempty"`
}

func (m *Locality) Reset()                    { *m = Locality{} }
func (m *Locality) String() string            { return proto.CompactTextString(m) }
func (*Locality) ProtoMessage()               {}
func (*Locality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Locality) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Locality) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Locality) GetSubZone() string {
	if m != nil {
		return m.SubZone
	}
	return ""
}

// Identifies a specific Envoy instance. Remote server may have per Envoy configuration.
type Node struct {
	// An opaque node identifier for the Envoy node. This must be set.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The cluster that the Envoy node belongs to. This must be set.
	Cluster  string                   `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Metadata *google_protobuf1.Struct `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Locality *Locality                `protobuf:"bytes,4,opt,name=locality" json:"locality,omitempty"`
	// This is motivated by informing a management server during canary which
	// version of Envoy is being tested in a heterogeneous fleet.
	BuildVersion string `protobuf:"bytes,5,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Node) GetMetadata() *google_protobuf1.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Node) GetLocality() *Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *Node) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

type Endpoint struct {
	Address *envoy_api_v21.Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Endpoint) GetAddress() *envoy_api_v21.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map from filter
// name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
// - {"envoy.lb": {"canary": <bool> }}. This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
type Metadata struct {
	// Key is the reverse DNS filter name.
	FilterMetadata map[string]*google_protobuf1.Struct `protobuf:"bytes,1,rep,name=filter_metadata,json=filterMetadata" json:"filter_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metadata) GetFilterMetadata() map[string]*google_protobuf1.Struct {
	if m != nil {
		return m.FilterMetadata
	}
	return nil
}

// Runtime derived uint32 with a default when not specified.
type RuntimeUInt32 struct {
	// Default value if runtime value is not available.
	DefaultValue uint32 `protobuf:"varint,2,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// Runtime key to get value for comparision. This value is used if defined.
	RuntimeKey string `protobuf:"bytes,3,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RuntimeUInt32) Reset()                    { *m = RuntimeUInt32{} }
func (m *RuntimeUInt32) String() string            { return proto.CompactTextString(m) }
func (*RuntimeUInt32) ProtoMessage()               {}
func (*RuntimeUInt32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RuntimeUInt32) GetDefaultValue() uint32 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func (m *RuntimeUInt32) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

// Header name/value pair.
type HeaderValue struct {
	// Header name.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Header value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HeaderValue) Reset()                    { *m = HeaderValue{} }
func (m *HeaderValue) String() string            { return proto.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()               {}
func (*HeaderValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HeaderValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HeaderValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Header name/value pair plus option to control append behavior.
type HeaderValueOption struct {
	// Header Name/Value pair that this option applies to.
	//
	// The same format specifier as used for HTTP access logging applies here,
	// however unknown header values are replaced with the empty string instead
	// of -. [V2-API-DIFF].
	Header *HeaderValue `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Should the value be appended? If false (default), the value overrides
	// existing values [V2-API-DIFF].
	Append *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=append" json:"append,omitempty"`
}

func (m *HeaderValueOption) Reset()                    { *m = HeaderValueOption{} }
func (m *HeaderValueOption) String() string            { return proto.CompactTextString(m) }
func (*HeaderValueOption) ProtoMessage()               {}
func (*HeaderValueOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HeaderValueOption) GetHeader() *HeaderValue {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HeaderValueOption) GetAppend() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Append
	}
	return nil
}

type ApiConfigSource struct {
	ApiType ApiConfigSource_ApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,enum=envoy.api.v2.ApiConfigSource_ApiType" json:"api_type,omitempty"`
	// Multiple cluster names may be provided. If > 1 cluster is defined, clusters
	// will be cycled through if any kind of failure occurs.
	ClusterName []string `protobuf:"bytes,2,rep,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// For REST APIs, the delay between successive polls.
	RefreshDelay *google_protobuf.Duration `protobuf:"bytes,3,opt,name=refresh_delay,json=refreshDelay" json:"refresh_delay,omitempty"`
}

func (m *ApiConfigSource) Reset()                    { *m = ApiConfigSource{} }
func (m *ApiConfigSource) String() string            { return proto.CompactTextString(m) }
func (*ApiConfigSource) ProtoMessage()               {}
func (*ApiConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ApiConfigSource) GetApiType() ApiConfigSource_ApiType {
	if m != nil {
		return m.ApiType
	}
	return ApiConfigSource_REST_LEGACY
}

func (m *ApiConfigSource) GetClusterName() []string {
	if m != nil {
		return m.ClusterName
	}
	return nil
}

func (m *ApiConfigSource) GetRefreshDelay() *google_protobuf.Duration {
	if m != nil {
		return m.RefreshDelay
	}
	return nil
}

// ADS will be used to fetch resources.
type AggregatedConfigSource struct {
}

func (m *AggregatedConfigSource) Reset()                    { *m = AggregatedConfigSource{} }
func (m *AggregatedConfigSource) String() string            { return proto.CompactTextString(m) }
func (*AggregatedConfigSource) ProtoMessage()               {}
func (*AggregatedConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Configuration for listeners, clusters, routes, endpoints etc. may either be
// sourced from the filesystem or from an API source. Filesystem configs are
// watched with inotify for updates.
type ConfigSource struct {
	// Types that are valid to be assigned to ConfigSourceSpecifier:
	//	*ConfigSource_Path
	//	*ConfigSource_ApiConfigSource
	//	*ConfigSource_Ads
	ConfigSourceSpecifier isConfigSource_ConfigSourceSpecifier `protobuf_oneof:"config_source_specifier"`
}

func (m *ConfigSource) Reset()                    { *m = ConfigSource{} }
func (m *ConfigSource) String() string            { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()               {}
func (*ConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isConfigSource_ConfigSourceSpecifier interface {
	isConfigSource_ConfigSourceSpecifier()
}

type ConfigSource_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,oneof"`
}
type ConfigSource_ApiConfigSource struct {
	ApiConfigSource *ApiConfigSource `protobuf:"bytes,2,opt,name=api_config_source,json=apiConfigSource,oneof"`
}
type ConfigSource_Ads struct {
	Ads *AggregatedConfigSource `protobuf:"bytes,3,opt,name=ads,oneof"`
}

func (*ConfigSource_Path) isConfigSource_ConfigSourceSpecifier()            {}
func (*ConfigSource_ApiConfigSource) isConfigSource_ConfigSourceSpecifier() {}
func (*ConfigSource_Ads) isConfigSource_ConfigSourceSpecifier()             {}

func (m *ConfigSource) GetConfigSourceSpecifier() isConfigSource_ConfigSourceSpecifier {
	if m != nil {
		return m.ConfigSourceSpecifier
	}
	return nil
}

func (m *ConfigSource) GetPath() string {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_Path); ok {
		return x.Path
	}
	return ""
}

func (m *ConfigSource) GetApiConfigSource() *ApiConfigSource {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_ApiConfigSource); ok {
		return x.ApiConfigSource
	}
	return nil
}

func (m *ConfigSource) GetAds() *AggregatedConfigSource {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_Ads); ok {
		return x.Ads
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConfigSource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConfigSource_OneofMarshaler, _ConfigSource_OneofUnmarshaler, _ConfigSource_OneofSizer, []interface{}{
		(*ConfigSource_Path)(nil),
		(*ConfigSource_ApiConfigSource)(nil),
		(*ConfigSource_Ads)(nil),
	}
}

func _ConfigSource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConfigSource)
	// config_source_specifier
	switch x := m.ConfigSourceSpecifier.(type) {
	case *ConfigSource_Path:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *ConfigSource_ApiConfigSource:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiConfigSource); err != nil {
			return err
		}
	case *ConfigSource_Ads:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ads); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ConfigSource.ConfigSourceSpecifier has unexpected type %T", x)
	}
	return nil
}

func _ConfigSource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConfigSource)
	switch tag {
	case 1: // config_source_specifier.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ConfigSourceSpecifier = &ConfigSource_Path{x}
		return true, err
	case 2: // config_source_specifier.api_config_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApiConfigSource)
		err := b.DecodeMessage(msg)
		m.ConfigSourceSpecifier = &ConfigSource_ApiConfigSource{msg}
		return true, err
	case 3: // config_source_specifier.ads
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AggregatedConfigSource)
		err := b.DecodeMessage(msg)
		m.ConfigSourceSpecifier = &ConfigSource_Ads{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ConfigSource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConfigSource)
	// config_source_specifier
	switch x := m.ConfigSourceSpecifier.(type) {
	case *ConfigSource_Path:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *ConfigSource_ApiConfigSource:
		s := proto.Size(x.ApiConfigSource)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConfigSource_Ads:
		s := proto.Size(x.Ads)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Locality)(nil), "envoy.api.v2.Locality")
	proto.RegisterType((*Node)(nil), "envoy.api.v2.Node")
	proto.RegisterType((*Endpoint)(nil), "envoy.api.v2.Endpoint")
	proto.RegisterType((*Metadata)(nil), "envoy.api.v2.Metadata")
	proto.RegisterType((*RuntimeUInt32)(nil), "envoy.api.v2.RuntimeUInt32")
	proto.RegisterType((*HeaderValue)(nil), "envoy.api.v2.HeaderValue")
	proto.RegisterType((*HeaderValueOption)(nil), "envoy.api.v2.HeaderValueOption")
	proto.RegisterType((*ApiConfigSource)(nil), "envoy.api.v2.ApiConfigSource")
	proto.RegisterType((*AggregatedConfigSource)(nil), "envoy.api.v2.AggregatedConfigSource")
	proto.RegisterType((*ConfigSource)(nil), "envoy.api.v2.ConfigSource")
	proto.RegisterEnum("envoy.api.v2.RoutingPriority", RoutingPriority_name, RoutingPriority_value)
	proto.RegisterEnum("envoy.api.v2.RequestMethod", RequestMethod_name, RequestMethod_value)
	proto.RegisterEnum("envoy.api.v2.ApiConfigSource_ApiType", ApiConfigSource_ApiType_name, ApiConfigSource_ApiType_value)
}

func init() { proto.RegisterFile("api/base.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6f, 0xe2, 0x46,
	0x14, 0xc5, 0x40, 0x80, 0x5c, 0x20, 0x78, 0xa7, 0xdb, 0x2c, 0x89, 0xfa, 0xb1, 0x75, 0x5b, 0x29,
	0x8a, 0x54, 0x47, 0x25, 0xaa, 0xb4, 0x6a, 0xa5, 0xaa, 0x2c, 0x38, 0x01, 0x6d, 0x02, 0x74, 0x30,
	0x2b, 0x75, 0x5f, 0xac, 0x01, 0x0f, 0x64, 0x54, 0xc7, 0xe3, 0x8e, 0xc7, 0xa9, 0xd8, 0x87, 0xfe,
	0xb1, 0x4a, 0x7d, 0xec, 0x4f, 0xe9, 0xef, 0xa8, 0x66, 0x3c, 0xa4, 0x90, 0x6c, 0xf3, 0x36, 0xf7,
	0xcc, 0x39, 0x77, 0xce, 0x3d, 0x33, 0x36, 0x1c, 0x90, 0x84, 0x9d, 0xcd, 0x49, 0x4a, 0xdd, 0x44,
	0x70, 0xc9, 0x51, 0x83, 0xc6, 0x77, 0x7c, 0xed, 0x92, 0x84, 0xb9, 0x77, 0x9d, 0xe3, 0x67, 0x6a,
	0x97, 0x84, 0xa1, 0xa0, 0x69, 0x9a, 0x13, 0x8e, 0x3f, 0x5b, 0x71, 0xbe, 0x8a, 0xe8, 0x99, 0xae,
	0xe6, 0xd9, 0xf2, 0x2c, 0xcc, 0x04, 0x91, 0x8c, 0xc7, 0x66, 0xff, 0x93, 0x87, 0xfb, 0xa9, 0x14,
	0xd9, 0x42, 0xfe, 0x9f, 0xfa, 0x77, 0x41, 0x92, 0x84, 0x0a, 0xd3, 0xdd, 0xf9, 0x19, 0x6a, 0x57,
	0x7c, 0x41, 0x22, 0x26, 0xd7, 0xe8, 0x10, 0x2a, 0x82, 0xae, 0x18, 0x8f, 0xdb, 0xd6, 0x4b, 0xeb,
	0x64, 0x1f, 0x9b, 0x0a, 0x21, 0x28, 0xbf, 0xe7, 0x31, 0x6d, 0x17, 0x35, 0xaa, 0xd7, 0xe8, 0x08,
	0x6a, 0x69, 0x36, 0x0f, 0x34, 0x5e, 0xd2, 0x78, 0x35, 0xcd, 0xe6, 0xef, 0x78, 0x4c, 0x9d, 0xbf,
	0x2c, 0x28, 0x8f, 0x78, 0x48, 0xd1, 0x01, 0x14, 0x59, 0x68, 0x7a, 0x15, 0x59, 0x88, 0xda, 0x50,
	0x5d, 0x44, 0x59, 0x2a, 0xa9, 0x30, 0xad, 0x36, 0x25, 0x3a, 0x87, 0xda, 0x2d, 0x95, 0x24, 0x24,
	0x92, 0xe8, 0x6e, 0xf5, 0xce, 0x0b, 0x37, 0x37, 0xee, 0x6e, 0x8c, 0xbb, 0x53, 0x3d, 0x16, 0xbe,
	0x27, 0xa2, 0x0e, 0xd4, 0x22, 0x63, 0xbd, 0x5d, 0xd6, 0xa2, 0x43, 0x77, 0x3b, 0x4c, 0x77, 0x33,
	0x18, 0xbe, 0xe7, 0xa1, 0x2f, 0xa1, 0x39, 0xcf, 0x58, 0x14, 0x06, 0x77, 0x54, 0xa4, 0x6a, 0xd2,
	0x3d, 0x6d, 0xa4, 0xa1, 0xc1, 0xb7, 0x39, 0xe6, 0xfc, 0x00, 0x35, 0x2f, 0x0e, 0x13, 0xce, 0x62,
	0x89, 0xce, 0xa0, 0x6a, 0xae, 0x43, 0x0f, 0x52, 0xef, 0x7c, 0xbc, 0x7b, 0x46, 0x37, 0xdf, 0xc4,
	0x1b, 0x96, 0xf3, 0xa7, 0x05, 0xb5, 0xeb, 0x8d, 0xc5, 0x29, 0xb4, 0x96, 0x2c, 0x92, 0x54, 0x04,
	0xf7, 0xe3, 0x59, 0x2f, 0x4b, 0x27, 0xf5, 0xce, 0xe9, 0x6e, 0x97, 0x8d, 0xc0, 0xbd, 0xd0, 0xec,
	0x4d, 0xe9, 0xc5, 0x52, 0xac, 0xf1, 0xc1, 0x72, 0x07, 0x3c, 0x7e, 0x07, 0x1f, 0x7d, 0x80, 0x86,
	0x6c, 0x28, 0xfd, 0x4a, 0xd7, 0x26, 0x6e, 0xb5, 0x44, 0xdf, 0xc0, 0xde, 0x1d, 0x89, 0xb2, 0xfc,
	0xe2, 0x9e, 0x88, 0x34, 0x67, 0x7d, 0x5f, 0x7c, 0x65, 0x39, 0x33, 0x68, 0xe2, 0x2c, 0x96, 0xec,
	0x96, 0xce, 0x86, 0xb1, 0x3c, 0xef, 0xa8, 0xc0, 0x42, 0xba, 0x24, 0x59, 0x24, 0x83, 0xff, 0x7a,
	0x35, 0x71, 0xc3, 0x80, 0x6f, 0x15, 0x86, 0x3e, 0x87, 0xba, 0xc8, 0x55, 0x81, 0xb2, 0x90, 0xbf,
	0x07, 0x30, 0xd0, 0x1b, 0xba, 0x76, 0xbe, 0x83, 0xfa, 0x80, 0x92, 0x90, 0x8a, 0x9c, 0xff, 0xd8,
	0xea, 0xf3, 0x6d, 0xab, 0xfb, 0xc6, 0x91, 0xf3, 0x1e, 0x9e, 0x6d, 0xc9, 0xc6, 0x89, 0x7a, 0xf5,
	0xe8, 0x5b, 0xa8, 0xdc, 0x68, 0xd0, 0x5c, 0xc8, 0xd1, 0x6e, 0x94, 0x5b, 0x02, 0x6c, 0x88, 0xa8,
	0x03, 0x15, 0xf5, 0xe8, 0xe3, 0xd0, 0x24, 0x71, 0xfc, 0x28, 0x89, 0xd7, 0x9c, 0x47, 0x46, 0x93,
	0x33, 0x9d, 0x7f, 0x2c, 0x68, 0x75, 0x13, 0xd6, 0xe3, 0xf1, 0x92, 0xad, 0xa6, 0x3c, 0x13, 0x0b,
	0x8a, 0x7e, 0x82, 0x1a, 0x49, 0x58, 0x20, 0xd7, 0x09, 0xd5, 0x87, 0x1f, 0x74, 0xbe, 0x7e, 0xf0,
	0x1a, 0x76, 0x05, 0xaa, 0xf6, 0xd7, 0x09, 0xc5, 0x55, 0x92, 0x2f, 0xd0, 0x17, 0xd0, 0x30, 0x6f,
	0x3e, 0x88, 0xc9, 0xad, 0x1a, 0xb7, 0x74, 0xb2, 0x8f, 0xeb, 0x06, 0x1b, 0x91, 0x5b, 0x8a, 0x7e,
	0x84, 0xa6, 0xa0, 0x4b, 0x41, 0xd3, 0x9b, 0x20, 0xa4, 0x11, 0x59, 0x9b, 0x0f, 0xe2, 0xe8, 0x91,
	0xe7, 0xbe, 0xf9, 0x0f, 0xe0, 0x86, 0xe1, 0xf7, 0x15, 0xdd, 0x71, 0xa1, 0x6a, 0x8e, 0x45, 0x2d,
	0xa8, 0x63, 0x6f, 0xea, 0x07, 0x57, 0xde, 0x65, 0xb7, 0xf7, 0x8b, 0x5d, 0x40, 0x35, 0x28, 0x2b,
	0xc0, 0xb6, 0xd4, 0xea, 0x12, 0x4f, 0x7a, 0x76, 0xd1, 0x69, 0xc3, 0x61, 0x77, 0xb5, 0x12, 0x74,
	0x45, 0x24, 0x0d, 0xb7, 0xdd, 0x3b, 0x7f, 0x5b, 0xd0, 0xd8, 0x99, 0xff, 0x39, 0x94, 0x13, 0x22,
	0x6f, 0xf2, 0x8b, 0x1b, 0x14, 0xb0, 0xae, 0xd0, 0x1b, 0x50, 0x7f, 0xad, 0x60, 0xa1, 0x99, 0x41,
	0xaa, 0xa9, 0x26, 0xe8, 0x4f, 0x9f, 0x8c, 0x67, 0x50, 0xc0, 0x2d, 0xf2, 0x20, 0xe2, 0x57, 0x50,
	0x22, 0x61, 0x6a, 0x66, 0xfe, 0xea, 0x81, 0xfc, 0x83, 0x36, 0x07, 0x05, 0xac, 0x24, 0xaf, 0x8f,
	0xe0, 0xc5, 0x8e, 0x85, 0x20, 0x4d, 0xe8, 0x82, 0x2d, 0x19, 0x15, 0xa7, 0x27, 0xd0, 0xc2, 0x3c,
	0x93, 0x2c, 0x5e, 0x4d, 0x04, 0xe3, 0x42, 0xfd, 0x08, 0xea, 0x50, 0xed, 0x7b, 0x17, 0xdd, 0xd9,
	0x95, 0x9f, 0xc7, 0x32, 0x18, 0x5e, 0x0e, 0x6c, 0xeb, 0xf4, 0x0f, 0x68, 0x62, 0xfa, 0x5b, 0x46,
	0x53, 0x79, 0x4d, 0xe5, 0x0d, 0x0f, 0xd1, 0x21, 0xa0, 0x6b, 0xcf, 0x1f, 0x8c, 0xfb, 0xc1, 0x6c,
	0x34, 0x9d, 0x78, 0xbd, 0xe1, 0xc5, 0xd0, 0xeb, 0xdb, 0x05, 0x54, 0x85, 0xd2, 0xa5, 0x67, 0x82,
	0x1c, 0x78, 0xdd, 0xbe, 0x5d, 0x54, 0xab, 0xc9, 0x78, 0xea, 0xdb, 0x25, 0xb5, 0x39, 0x99, 0xf9,
	0x76, 0x19, 0x01, 0x54, 0xfa, 0xde, 0x95, 0xe7, 0x7b, 0xf6, 0x9e, 0x3a, 0xb1, 0x37, 0x1e, 0x8d,
	0xbc, 0x9e, 0x6f, 0x57, 0x54, 0x31, 0x9e, 0xf8, 0xc3, 0xf1, 0x68, 0x6a, 0x57, 0xd1, 0x3e, 0xec,
	0xf9, 0xb8, 0xdb, 0xf3, 0xec, 0xda, 0xbc, 0xa2, 0x6f, 0xf7, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xed, 0x30, 0xbd, 0xd6, 0x26, 0x06, 0x00, 0x00,
}
