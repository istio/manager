// Code generated by protoc-gen-go.
// source: proxy/v1/config/cfg.proto
// DO NOT EDIT!

/*
Package istio_proxy_v1alpha_config is a generated protocol buffer package.

It is generated from these files:
	proxy/v1/config/cfg.proto

It has these top-level messages:
	ProxyConfig
	RouteRule
	L4RouteRule
	HttpRouteRule
	L4MatchCondition
	L4MatchAttributes
	ClusterIdentifier
	WeightedCluster
	HttpMatchCondition
	StringMatch
	UpstreamCluster
	LoadBalancingPolicy
	TimeoutPolicy
	RetryPolicy
	CircuitBreakerPolicy
	HttpFaultInjection
	L4FaultInjection
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// protocol Tcp|Udp
type L4MatchAttributes_L4Protocol int32

const (
	L4MatchAttributes_TCP L4MatchAttributes_L4Protocol = 0
	L4MatchAttributes_UDP L4MatchAttributes_L4Protocol = 1
)

var L4MatchAttributes_L4Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var L4MatchAttributes_L4Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x L4MatchAttributes_L4Protocol) String() string {
	return proto.EnumName(L4MatchAttributes_L4Protocol_name, int32(x))
}
func (L4MatchAttributes_L4Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type LoadBalancingPolicy_SimpleLBPolicy int32

const (
	// These four simple load balancing policies have literally no
	// additional configuration.
	LoadBalancingPolicy_ROUND_ROBIN LoadBalancingPolicy_SimpleLBPolicy = 0
	LoadBalancingPolicy_LEAST_CONN  LoadBalancingPolicy_SimpleLBPolicy = 1
	LoadBalancingPolicy_IP_HASH     LoadBalancingPolicy_SimpleLBPolicy = 2
	LoadBalancingPolicy_RANDOM      LoadBalancingPolicy_SimpleLBPolicy = 3
)

var LoadBalancingPolicy_SimpleLBPolicy_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_CONN",
	2: "IP_HASH",
	3: "RANDOM",
}
var LoadBalancingPolicy_SimpleLBPolicy_value = map[string]int32{
	"ROUND_ROBIN": 0,
	"LEAST_CONN":  1,
	"IP_HASH":     2,
	"RANDOM":      3,
}

func (x LoadBalancingPolicy_SimpleLBPolicy) String() string {
	return proto.EnumName(LoadBalancingPolicy_SimpleLBPolicy_name, int32(x))
}
func (LoadBalancingPolicy_SimpleLBPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

// Proxy level global configurations go here
type ProxyConfig struct {
	// config specification version.
	Revision int32 `protobuf:"varint,1,opt,name=revision" json:"revision,omitempty"`
	// Since a Http request can match multiple route rules (e.g., there are
	// two routes for the prefix /foo, with differing Http match attributes
	// such as Http headers), the first rule to match will/should be chosen
	// by proxy implementations N.B.: When a request does not match any rule
	// for Http, the downstream service would receive a HTTP 404.
	RouteRules []*RouteRule `protobuf:"bytes,2,rep,name=route_rules,json=routeRules" json:"route_rules,omitempty"`
	// RouteRule determines the upstream cluster to which traffic should be
	// routed to.  The UpstreamCluster describes how to obtain cluster
	// members (through discovery or through static configuration), and
	// policies that determine how to handle traffic (load balancing
	// policies, failure recovery policies such as timeouts, retries, circuit
	// breakers), etc.
	UpstreamClusters []*UpstreamCluster `protobuf:"bytes,3,rep,name=upstream_clusters,json=upstreamClusters" json:"upstream_clusters,omitempty"`
}

func (m *ProxyConfig) Reset()                    { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string            { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()               {}
func (*ProxyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProxyConfig) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *ProxyConfig) GetRouteRules() []*RouteRule {
	if m != nil {
		return m.RouteRules
	}
	return nil
}

func (m *ProxyConfig) GetUpstreamClusters() []*UpstreamCluster {
	if m != nil {
		return m.UpstreamClusters
	}
	return nil
}

// Describes rules for routing a request/connection to an upstream
// service, based on attributes associated with the request/connection
// and downstream service invoking the API call. The choice of the specific
// upstream cluster will be determined by the routing rule.
type RouteRule struct {
	// Types that are valid to be assigned to RouteRule:
	//	*RouteRule_Layer4
	//	*RouteRule_Http
	RouteRule isRouteRule_RouteRule `protobuf_oneof:"route_rule"`
}

func (m *RouteRule) Reset()                    { *m = RouteRule{} }
func (m *RouteRule) String() string            { return proto.CompactTextString(m) }
func (*RouteRule) ProtoMessage()               {}
func (*RouteRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isRouteRule_RouteRule interface {
	isRouteRule_RouteRule()
}

type RouteRule_Layer4 struct {
	Layer4 *L4RouteRule `protobuf:"bytes,1,opt,name=layer4,oneof"`
}
type RouteRule_Http struct {
	Http *HttpRouteRule `protobuf:"bytes,2,opt,name=http,oneof"`
}

func (*RouteRule_Layer4) isRouteRule_RouteRule() {}
func (*RouteRule_Http) isRouteRule_RouteRule()   {}

func (m *RouteRule) GetRouteRule() isRouteRule_RouteRule {
	if m != nil {
		return m.RouteRule
	}
	return nil
}

func (m *RouteRule) GetLayer4() *L4RouteRule {
	if x, ok := m.GetRouteRule().(*RouteRule_Layer4); ok {
		return x.Layer4
	}
	return nil
}

func (m *RouteRule) GetHttp() *HttpRouteRule {
	if x, ok := m.GetRouteRule().(*RouteRule_Http); ok {
		return x.Http
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteRule_OneofMarshaler, _RouteRule_OneofUnmarshaler, _RouteRule_OneofSizer, []interface{}{
		(*RouteRule_Layer4)(nil),
		(*RouteRule_Http)(nil),
	}
}

func _RouteRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteRule)
	// route_rule
	switch x := m.RouteRule.(type) {
	case *RouteRule_Layer4:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Layer4); err != nil {
			return err
		}
	case *RouteRule_Http:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteRule.RouteRule has unexpected type %T", x)
	}
	return nil
}

func _RouteRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteRule)
	switch tag {
	case 1: // route_rule.layer4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L4RouteRule)
		err := b.DecodeMessage(msg)
		m.RouteRule = &RouteRule_Layer4{msg}
		return true, err
	case 2: // route_rule.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpRouteRule)
		err := b.DecodeMessage(msg)
		m.RouteRule = &RouteRule_Http{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteRule)
	// route_rule
	switch x := m.RouteRule.(type) {
	case *RouteRule_Layer4:
		s := proto.Size(x.Layer4)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteRule_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Routes incoming Tcp/Udp traffic to one of the clusters of a service
// based on match criterion.
type L4RouteRule struct {
	// Set of conditions that must be satisfied, such as downstream cluster
	// labels, connection attributes, etc.
	Match *L4MatchCondition `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	// Each routing rule is associated with one or more upstream clusters,
	// (see glossary in beginning of document). Weights associated with the
	// cluster determine the proportion of traffic it receives.
	WeightedClusters []*WeightedCluster `protobuf:"bytes,2,rep,name=weighted_clusters,json=weightedClusters" json:"weighted_clusters,omitempty"`
	// TODO: This should be done on per-cluster basis.
	Fault *L4FaultInjection `protobuf:"bytes,3,opt,name=fault" json:"fault,omitempty"`
}

func (m *L4RouteRule) Reset()                    { *m = L4RouteRule{} }
func (m *L4RouteRule) String() string            { return proto.CompactTextString(m) }
func (*L4RouteRule) ProtoMessage()               {}
func (*L4RouteRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *L4RouteRule) GetMatch() *L4MatchCondition {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *L4RouteRule) GetWeightedClusters() []*WeightedCluster {
	if m != nil {
		return m.WeightedClusters
	}
	return nil
}

func (m *L4RouteRule) GetFault() *L4FaultInjection {
	if m != nil {
		return m.Fault
	}
	return nil
}

// Routes Http requests to one of the upstream clusters based on
// match criterion.
type HttpRouteRule struct {
	// Set of conditions that must be satisfied, such as downstream service
	// labels, request attributes, etc.
	Match *HttpMatchCondition `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	// Each routing rule is associated with one or more upstream clusters,
	// (see glossary in beginning of document). Weights associated with the
	// cluster determine the proportion of traffic it receives.
	WeightedClusters []*WeightedCluster `protobuf:"bytes,2,rep,name=weighted_clusters,json=weightedClusters" json:"weighted_clusters,omitempty"`
	// Faults can be injected into the API calls by the proxy, for
	// testing the failure recovery capabilities of downstream services.
	// Faults include aborting the Http request from downstream service,
	// delaying the proxying of request to the upstream service, or both.
	// TODO: This should move into UpstreamCluster
	Fault *HttpFaultInjection `protobuf:"bytes,3,opt,name=fault" json:"fault,omitempty"`
	// Custom properties per rule (depends on proxy), such as open tracing,
	// access log formats, etc. Some of these will be defined in future
	// iterations.
	CustomImpl *google_protobuf.Any `protobuf:"bytes,4,opt,name=custom_impl,json=customImpl" json:"custom_impl,omitempty"`
}

func (m *HttpRouteRule) Reset()                    { *m = HttpRouteRule{} }
func (m *HttpRouteRule) String() string            { return proto.CompactTextString(m) }
func (*HttpRouteRule) ProtoMessage()               {}
func (*HttpRouteRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HttpRouteRule) GetMatch() *HttpMatchCondition {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HttpRouteRule) GetWeightedClusters() []*WeightedCluster {
	if m != nil {
		return m.WeightedClusters
	}
	return nil
}

func (m *HttpRouteRule) GetFault() *HttpFaultInjection {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (m *HttpRouteRule) GetCustomImpl() *google_protobuf.Any {
	if m != nil {
		return m.CustomImpl
	}
	return nil
}

// Basic routing rule match criterion using Tcp attributes and downstream
// cluster identifier
type L4MatchCondition struct {
	// Set of layer 4 match attributes such as src ip/port, dst ip/port and
	// protocol
	L4Attributes *L4MatchAttributes `protobuf:"bytes,1,opt,name=l4attributes" json:"l4attributes,omitempty"`
	// Identify the downstream cluster initiating the connection.
	SrcCluster *ClusterIdentifier `protobuf:"bytes,2,opt,name=src_cluster,json=srcCluster" json:"src_cluster,omitempty"`
}

func (m *L4MatchCondition) Reset()                    { *m = L4MatchCondition{} }
func (m *L4MatchCondition) String() string            { return proto.CompactTextString(m) }
func (*L4MatchCondition) ProtoMessage()               {}
func (*L4MatchCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *L4MatchCondition) GetL4Attributes() *L4MatchAttributes {
	if m != nil {
		return m.L4Attributes
	}
	return nil
}

func (m *L4MatchCondition) GetSrcCluster() *ClusterIdentifier {
	if m != nil {
		return m.SrcCluster
	}
	return nil
}

// L4 connection match attributes
type L4MatchAttributes struct {
	// IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
	// just a.b.c.d
	SrcIpSubnet []string `protobuf:"bytes,1,rep,name=src_ip_subnet,json=srcIpSubnet" json:"src_ip_subnet,omitempty"`
	// source port
	SrcPort *google_protobuf1.UInt32Value `protobuf:"bytes,2,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	// IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
	// just a.b.c.d
	DstIpSubnet []string `protobuf:"bytes,3,rep,name=dst_ip_subnet,json=dstIpSubnet" json:"dst_ip_subnet,omitempty"`
	// destination port
	DstPort  *google_protobuf1.UInt32Value `protobuf:"bytes,4,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Protocol L4MatchAttributes_L4Protocol  `protobuf:"varint,5,opt,name=protocol,enum=istio.proxy.v1alpha.config.L4MatchAttributes_L4Protocol" json:"protocol,omitempty"`
}

func (m *L4MatchAttributes) Reset()                    { *m = L4MatchAttributes{} }
func (m *L4MatchAttributes) String() string            { return proto.CompactTextString(m) }
func (*L4MatchAttributes) ProtoMessage()               {}
func (*L4MatchAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *L4MatchAttributes) GetSrcIpSubnet() []string {
	if m != nil {
		return m.SrcIpSubnet
	}
	return nil
}

func (m *L4MatchAttributes) GetSrcPort() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.SrcPort
	}
	return nil
}

func (m *L4MatchAttributes) GetDstIpSubnet() []string {
	if m != nil {
		return m.DstIpSubnet
	}
	return nil
}

func (m *L4MatchAttributes) GetDstPort() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.DstPort
	}
	return nil
}

func (m *L4MatchAttributes) GetProtocol() L4MatchAttributes_L4Protocol {
	if m != nil {
		return m.Protocol
	}
	return L4MatchAttributes_TCP
}

// A name and one or more tags uniquely identify an upstream or downstream
// cluster. Names and tags can be arbitrary strings, and their
// interpretation is specific to the underlying platform (e.g., in
// kubernetes, name field could correspond to the service Name, while each
// tag string could be parsed into a pod label (key:value))
type ClusterIdentifier struct {
	Name string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *ClusterIdentifier) Reset()                    { *m = ClusterIdentifier{} }
func (m *ClusterIdentifier) String() string            { return proto.CompactTextString(m) }
func (*ClusterIdentifier) ProtoMessage()               {}
func (*ClusterIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClusterIdentifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterIdentifier) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Each routing rule is associated with one or more upstream clusters,
// (see glossary in beginning of document). Weights associated with the
// cluster determine the proportion of traffic it receives.
type WeightedCluster struct {
	// Unique identity of the upstream cluster. Must be the same as those used
	// in the definition of the UpstreamClusterPolicy.
	DstCluster *ClusterIdentifier `protobuf:"bytes,1,opt,name=dst_cluster,json=dstCluster" json:"dst_cluster,omitempty"`
	// The proportion of connections to be forwarded to the upstream
	// cluster. Max is 100. Sum of weights across versions should add up to
	// 100.
	Weight uint32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *WeightedCluster) Reset()                    { *m = WeightedCluster{} }
func (m *WeightedCluster) String() string            { return proto.CompactTextString(m) }
func (*WeightedCluster) ProtoMessage()               {}
func (*WeightedCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WeightedCluster) GetDstCluster() *ClusterIdentifier {
	if m != nil {
		return m.DstCluster
	}
	return nil
}

func (m *WeightedCluster) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// Http/1.1|Http/2|gRPC routing rule match criterion built on top of BaseMatchCondition
type HttpMatchCondition struct {
	// Set of layer 4 match attributes such as src ip/port, dst ip/port and
	// protocol
	L4Attributes *L4MatchAttributes `protobuf:"bytes,1,opt,name=l4attributes" json:"l4attributes,omitempty"`
	// Identify the downstream cluster initiating the connection.
	SrcCluster *ClusterIdentifier `protobuf:"bytes,2,opt,name=src_cluster,json=srcCluster" json:"src_cluster,omitempty"`
	// Set of Http request level match attributes
	Scheme string `protobuf:"bytes,3,opt,name=scheme" json:"scheme,omitempty"`
	// Match based on authority
	Authority *StringMatch `protobuf:"bytes,4,opt,name=authority" json:"authority,omitempty"`
	// Match based on URI
	Uri *StringMatch `protobuf:"bytes,5,opt,name=uri" json:"uri,omitempty"`
	// Match Http requests based on the specified headers
	// Support exact/prefix/regex match on header values
	Headers map[string]*StringMatch `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HttpMatchCondition) Reset()                    { *m = HttpMatchCondition{} }
func (m *HttpMatchCondition) String() string            { return proto.CompactTextString(m) }
func (*HttpMatchCondition) ProtoMessage()               {}
func (*HttpMatchCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HttpMatchCondition) GetL4Attributes() *L4MatchAttributes {
	if m != nil {
		return m.L4Attributes
	}
	return nil
}

func (m *HttpMatchCondition) GetSrcCluster() *ClusterIdentifier {
	if m != nil {
		return m.SrcCluster
	}
	return nil
}

func (m *HttpMatchCondition) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HttpMatchCondition) GetAuthority() *StringMatch {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *HttpMatchCondition) GetUri() *StringMatch {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *HttpMatchCondition) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Describes how to matches a given string (exact match, prefix-based match
// or posix style regex based match).
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType isStringMatch_MatchType `protobuf_oneof:"match_type"`
}

func (m *StringMatch) Reset()                    { *m = StringMatch{} }
func (m *StringMatch) String() string            { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()               {}
func (*StringMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,oneof"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,oneof"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// N.B. The policies are enforced on egress connections or requests,
// i.e., enforced when the downstream service (caller) is opening a
// connection/sending a request via the proxy to the upstream service.
type UpstreamCluster struct {
	// Unique identifier of the upstream cluster. The name and tags in the
	// cluster identifier are used by the service discovery component of the
	// proxy to identify the IP addresses of the pods|VMs running this
	// service.
	// TODO: Need to have a way to statically specify the hosts/IPs.
	Cluster *ClusterIdentifier `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Should be either http://.. or tcp://..
	HealthCheckEndpoint string                `protobuf:"bytes,2,opt,name=health_check_endpoint,json=healthCheckEndpoint" json:"health_check_endpoint,omitempty"`
	LbPolicy            *LoadBalancingPolicy  `protobuf:"bytes,3,opt,name=lb_policy,json=lbPolicy" json:"lb_policy,omitempty"`
	Timeout             *TimeoutPolicy        `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
	Retry               *RetryPolicy          `protobuf:"bytes,5,opt,name=retry" json:"retry,omitempty"`
	CircuitBreaker      *CircuitBreakerPolicy `protobuf:"bytes,6,opt,name=circuit_breaker,json=circuitBreaker" json:"circuit_breaker,omitempty"`
}

func (m *UpstreamCluster) Reset()                    { *m = UpstreamCluster{} }
func (m *UpstreamCluster) String() string            { return proto.CompactTextString(m) }
func (*UpstreamCluster) ProtoMessage()               {}
func (*UpstreamCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpstreamCluster) GetCluster() *ClusterIdentifier {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *UpstreamCluster) GetHealthCheckEndpoint() string {
	if m != nil {
		return m.HealthCheckEndpoint
	}
	return ""
}

func (m *UpstreamCluster) GetLbPolicy() *LoadBalancingPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return nil
}

func (m *UpstreamCluster) GetTimeout() *TimeoutPolicy {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *UpstreamCluster) GetRetry() *RetryPolicy {
	if m != nil {
		return m.Retry
	}
	return nil
}

func (m *UpstreamCluster) GetCircuitBreaker() *CircuitBreakerPolicy {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

// Load balancing policy to use when forwarding traffic to upstream clusters.
type LoadBalancingPolicy struct {
	// Types that are valid to be assigned to LbPolicy:
	//	*LoadBalancingPolicy_Name
	//	*LoadBalancingPolicy_CustomImpl
	LbPolicy isLoadBalancingPolicy_LbPolicy `protobuf_oneof:"lb_policy"`
}

func (m *LoadBalancingPolicy) Reset()                    { *m = LoadBalancingPolicy{} }
func (m *LoadBalancingPolicy) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancingPolicy) ProtoMessage()               {}
func (*LoadBalancingPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isLoadBalancingPolicy_LbPolicy interface {
	isLoadBalancingPolicy_LbPolicy()
}

type LoadBalancingPolicy_Name struct {
	Name LoadBalancingPolicy_SimpleLBPolicy `protobuf:"varint,1,opt,name=name,enum=istio.proxy.v1alpha.config.LoadBalancingPolicy_SimpleLBPolicy,oneof"`
}
type LoadBalancingPolicy_CustomImpl struct {
	CustomImpl *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom_impl,json=customImpl,oneof"`
}

func (*LoadBalancingPolicy_Name) isLoadBalancingPolicy_LbPolicy()       {}
func (*LoadBalancingPolicy_CustomImpl) isLoadBalancingPolicy_LbPolicy() {}

func (m *LoadBalancingPolicy) GetLbPolicy() isLoadBalancingPolicy_LbPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return nil
}

func (m *LoadBalancingPolicy) GetName() LoadBalancingPolicy_SimpleLBPolicy {
	if x, ok := m.GetLbPolicy().(*LoadBalancingPolicy_Name); ok {
		return x.Name
	}
	return LoadBalancingPolicy_ROUND_ROBIN
}

func (m *LoadBalancingPolicy) GetCustomImpl() *google_protobuf.Any {
	if x, ok := m.GetLbPolicy().(*LoadBalancingPolicy_CustomImpl); ok {
		return x.CustomImpl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoadBalancingPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoadBalancingPolicy_OneofMarshaler, _LoadBalancingPolicy_OneofUnmarshaler, _LoadBalancingPolicy_OneofSizer, []interface{}{
		(*LoadBalancingPolicy_Name)(nil),
		(*LoadBalancingPolicy_CustomImpl)(nil),
	}
}

func _LoadBalancingPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoadBalancingPolicy)
	// lb_policy
	switch x := m.LbPolicy.(type) {
	case *LoadBalancingPolicy_Name:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Name))
	case *LoadBalancingPolicy_CustomImpl:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomImpl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LoadBalancingPolicy.LbPolicy has unexpected type %T", x)
	}
	return nil
}

func _LoadBalancingPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoadBalancingPolicy)
	switch tag {
	case 1: // lb_policy.name
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.LbPolicy = &LoadBalancingPolicy_Name{LoadBalancingPolicy_SimpleLBPolicy(x)}
		return true, err
	case 2: // lb_policy.custom_impl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.LbPolicy = &LoadBalancingPolicy_CustomImpl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LoadBalancingPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoadBalancingPolicy)
	// lb_policy
	switch x := m.LbPolicy.(type) {
	case *LoadBalancingPolicy_Name:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Name))
	case *LoadBalancingPolicy_CustomImpl:
		s := proto.Size(x.CustomImpl)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Request timeout: wait time until a response is received. Does not
// indicate the time for the entire response to arrive.
type TimeoutPolicy struct {
	// Types that are valid to be assigned to TimeoutPolicy:
	//	*TimeoutPolicy_SimpleTimeout
	//	*TimeoutPolicy_CustomImpl
	TimeoutPolicy isTimeoutPolicy_TimeoutPolicy `protobuf_oneof:"timeout_policy"`
}

func (m *TimeoutPolicy) Reset()                    { *m = TimeoutPolicy{} }
func (m *TimeoutPolicy) String() string            { return proto.CompactTextString(m) }
func (*TimeoutPolicy) ProtoMessage()               {}
func (*TimeoutPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isTimeoutPolicy_TimeoutPolicy interface {
	isTimeoutPolicy_TimeoutPolicy()
}

type TimeoutPolicy_SimpleTimeout struct {
	SimpleTimeout *TimeoutPolicy_SimpleTimeoutPolicy `protobuf:"bytes,1,opt,name=simple_timeout,json=simpleTimeout,oneof"`
}
type TimeoutPolicy_CustomImpl struct {
	CustomImpl *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom_impl,json=customImpl,oneof"`
}

func (*TimeoutPolicy_SimpleTimeout) isTimeoutPolicy_TimeoutPolicy() {}
func (*TimeoutPolicy_CustomImpl) isTimeoutPolicy_TimeoutPolicy()    {}

func (m *TimeoutPolicy) GetTimeoutPolicy() isTimeoutPolicy_TimeoutPolicy {
	if m != nil {
		return m.TimeoutPolicy
	}
	return nil
}

func (m *TimeoutPolicy) GetSimpleTimeout() *TimeoutPolicy_SimpleTimeoutPolicy {
	if x, ok := m.GetTimeoutPolicy().(*TimeoutPolicy_SimpleTimeout); ok {
		return x.SimpleTimeout
	}
	return nil
}

func (m *TimeoutPolicy) GetCustomImpl() *google_protobuf.Any {
	if x, ok := m.GetTimeoutPolicy().(*TimeoutPolicy_CustomImpl); ok {
		return x.CustomImpl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TimeoutPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TimeoutPolicy_OneofMarshaler, _TimeoutPolicy_OneofUnmarshaler, _TimeoutPolicy_OneofSizer, []interface{}{
		(*TimeoutPolicy_SimpleTimeout)(nil),
		(*TimeoutPolicy_CustomImpl)(nil),
	}
}

func _TimeoutPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TimeoutPolicy)
	// timeout_policy
	switch x := m.TimeoutPolicy.(type) {
	case *TimeoutPolicy_SimpleTimeout:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleTimeout); err != nil {
			return err
		}
	case *TimeoutPolicy_CustomImpl:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomImpl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TimeoutPolicy.TimeoutPolicy has unexpected type %T", x)
	}
	return nil
}

func _TimeoutPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TimeoutPolicy)
	switch tag {
	case 1: // timeout_policy.simple_timeout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimeoutPolicy_SimpleTimeoutPolicy)
		err := b.DecodeMessage(msg)
		m.TimeoutPolicy = &TimeoutPolicy_SimpleTimeout{msg}
		return true, err
	case 2: // timeout_policy.custom_impl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.TimeoutPolicy = &TimeoutPolicy_CustomImpl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TimeoutPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TimeoutPolicy)
	// timeout_policy
	switch x := m.TimeoutPolicy.(type) {
	case *TimeoutPolicy_SimpleTimeout:
		s := proto.Size(x.SimpleTimeout)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TimeoutPolicy_CustomImpl:
		s := proto.Size(x.CustomImpl)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TimeoutPolicy_SimpleTimeoutPolicy struct {
	// timeout is per attempt, when retries are specified as well.
	// seconds.nanoseconds format
	TimeoutSeconds float64 `protobuf:"fixed64,1,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	// Downstream service could specify timeout via Http header to the
	// proxy, if the proxy supports such a feature.
	OverrideHeaderName string `protobuf:"bytes,2,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *TimeoutPolicy_SimpleTimeoutPolicy) Reset()         { *m = TimeoutPolicy_SimpleTimeoutPolicy{} }
func (m *TimeoutPolicy_SimpleTimeoutPolicy) String() string { return proto.CompactTextString(m) }
func (*TimeoutPolicy_SimpleTimeoutPolicy) ProtoMessage()    {}
func (*TimeoutPolicy_SimpleTimeoutPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

func (m *TimeoutPolicy_SimpleTimeoutPolicy) GetTimeoutSeconds() float64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *TimeoutPolicy_SimpleTimeoutPolicy) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

// Retry policy to use when a request to the upstream cluster fails.
type RetryPolicy struct {
	// Types that are valid to be assigned to RetryPolicy:
	//	*RetryPolicy_SimpleRetry
	//	*RetryPolicy_CustomImpl
	RetryPolicy isRetryPolicy_RetryPolicy `protobuf_oneof:"retry_policy"`
}

func (m *RetryPolicy) Reset()                    { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string            { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()               {}
func (*RetryPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isRetryPolicy_RetryPolicy interface {
	isRetryPolicy_RetryPolicy()
}

type RetryPolicy_SimpleRetry struct {
	SimpleRetry *RetryPolicy_SimpleRetryPolicy `protobuf:"bytes,1,opt,name=simple_retry,json=simpleRetry,oneof"`
}
type RetryPolicy_CustomImpl struct {
	CustomImpl *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom_impl,json=customImpl,oneof"`
}

func (*RetryPolicy_SimpleRetry) isRetryPolicy_RetryPolicy() {}
func (*RetryPolicy_CustomImpl) isRetryPolicy_RetryPolicy()  {}

func (m *RetryPolicy) GetRetryPolicy() isRetryPolicy_RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *RetryPolicy) GetSimpleRetry() *RetryPolicy_SimpleRetryPolicy {
	if x, ok := m.GetRetryPolicy().(*RetryPolicy_SimpleRetry); ok {
		return x.SimpleRetry
	}
	return nil
}

func (m *RetryPolicy) GetCustomImpl() *google_protobuf.Any {
	if x, ok := m.GetRetryPolicy().(*RetryPolicy_CustomImpl); ok {
		return x.CustomImpl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RetryPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RetryPolicy_OneofMarshaler, _RetryPolicy_OneofUnmarshaler, _RetryPolicy_OneofSizer, []interface{}{
		(*RetryPolicy_SimpleRetry)(nil),
		(*RetryPolicy_CustomImpl)(nil),
	}
}

func _RetryPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RetryPolicy)
	// retry_policy
	switch x := m.RetryPolicy.(type) {
	case *RetryPolicy_SimpleRetry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleRetry); err != nil {
			return err
		}
	case *RetryPolicy_CustomImpl:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomImpl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RetryPolicy.RetryPolicy has unexpected type %T", x)
	}
	return nil
}

func _RetryPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RetryPolicy)
	switch tag {
	case 1: // retry_policy.simple_retry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RetryPolicy_SimpleRetryPolicy)
		err := b.DecodeMessage(msg)
		m.RetryPolicy = &RetryPolicy_SimpleRetry{msg}
		return true, err
	case 2: // retry_policy.custom_impl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.RetryPolicy = &RetryPolicy_CustomImpl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RetryPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RetryPolicy)
	// retry_policy
	switch x := m.RetryPolicy.(type) {
	case *RetryPolicy_SimpleRetry:
		s := proto.Size(x.SimpleRetry)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetryPolicy_CustomImpl:
		s := proto.Size(x.CustomImpl)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RetryPolicy_SimpleRetryPolicy struct {
	// number of times the request to the upstream cluster should be retried.
	// total timeout would be attempts * timeout
	Attempts uint32 `protobuf:"varint,1,opt,name=attempts" json:"attempts,omitempty"`
	// Downstream Service could specify retry attempts via Http header to
	// the proxy, if the proxy supports such a feature.
	OverrideHeaderName string `protobuf:"bytes,2,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *RetryPolicy_SimpleRetryPolicy) Reset()         { *m = RetryPolicy_SimpleRetryPolicy{} }
func (m *RetryPolicy_SimpleRetryPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy_SimpleRetryPolicy) ProtoMessage()    {}
func (*RetryPolicy_SimpleRetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *RetryPolicy_SimpleRetryPolicy) GetAttempts() uint32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *RetryPolicy_SimpleRetryPolicy) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

// A minimal circuit breaker configuration for the upstream cluster.
type CircuitBreakerPolicy struct {
	// Types that are valid to be assigned to CbPolicy:
	//	*CircuitBreakerPolicy_SimpleCb
	//	*CircuitBreakerPolicy_CustomImpl
	CbPolicy isCircuitBreakerPolicy_CbPolicy `protobuf_oneof:"cb_policy"`
}

func (m *CircuitBreakerPolicy) Reset()                    { *m = CircuitBreakerPolicy{} }
func (m *CircuitBreakerPolicy) String() string            { return proto.CompactTextString(m) }
func (*CircuitBreakerPolicy) ProtoMessage()               {}
func (*CircuitBreakerPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isCircuitBreakerPolicy_CbPolicy interface {
	isCircuitBreakerPolicy_CbPolicy()
}

type CircuitBreakerPolicy_SimpleCb struct {
	SimpleCb *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy `protobuf:"bytes,1,opt,name=simple_cb,json=simpleCb,oneof"`
}
type CircuitBreakerPolicy_CustomImpl struct {
	CustomImpl *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom_impl,json=customImpl,oneof"`
}

func (*CircuitBreakerPolicy_SimpleCb) isCircuitBreakerPolicy_CbPolicy()   {}
func (*CircuitBreakerPolicy_CustomImpl) isCircuitBreakerPolicy_CbPolicy() {}

func (m *CircuitBreakerPolicy) GetCbPolicy() isCircuitBreakerPolicy_CbPolicy {
	if m != nil {
		return m.CbPolicy
	}
	return nil
}

func (m *CircuitBreakerPolicy) GetSimpleCb() *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy {
	if x, ok := m.GetCbPolicy().(*CircuitBreakerPolicy_SimpleCb); ok {
		return x.SimpleCb
	}
	return nil
}

func (m *CircuitBreakerPolicy) GetCustomImpl() *google_protobuf.Any {
	if x, ok := m.GetCbPolicy().(*CircuitBreakerPolicy_CustomImpl); ok {
		return x.CustomImpl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CircuitBreakerPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CircuitBreakerPolicy_OneofMarshaler, _CircuitBreakerPolicy_OneofUnmarshaler, _CircuitBreakerPolicy_OneofSizer, []interface{}{
		(*CircuitBreakerPolicy_SimpleCb)(nil),
		(*CircuitBreakerPolicy_CustomImpl)(nil),
	}
}

func _CircuitBreakerPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CircuitBreakerPolicy)
	// cb_policy
	switch x := m.CbPolicy.(type) {
	case *CircuitBreakerPolicy_SimpleCb:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleCb); err != nil {
			return err
		}
	case *CircuitBreakerPolicy_CustomImpl:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomImpl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CircuitBreakerPolicy.CbPolicy has unexpected type %T", x)
	}
	return nil
}

func _CircuitBreakerPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CircuitBreakerPolicy)
	switch tag {
	case 1: // cb_policy.simple_cb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CircuitBreakerPolicy_SimpleCircuitBreakerPolicy)
		err := b.DecodeMessage(msg)
		m.CbPolicy = &CircuitBreakerPolicy_SimpleCb{msg}
		return true, err
	case 2: // cb_policy.custom_impl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.CbPolicy = &CircuitBreakerPolicy_CustomImpl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CircuitBreakerPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CircuitBreakerPolicy)
	// cb_policy
	switch x := m.CbPolicy.(type) {
	case *CircuitBreakerPolicy_SimpleCb:
		s := proto.Size(x.SimpleCb)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CircuitBreakerPolicy_CustomImpl:
		s := proto.Size(x.CustomImpl)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CircuitBreakerPolicy_SimpleCircuitBreakerPolicy struct {
	// (for an unhealthy upstream cluster) number of consecutive requests that
	// should succeed before the upstream cluster is marked healthy.
	SuccessThreshold uint32 `protobuf:"varint,1,opt,name=success_threshold,json=successThreshold" json:"success_threshold,omitempty"`
	// (for a healthy upstream cluster) number of consecutive requests that
	// can fail before the upstream cluster is marked unhealthy.
	FailureThreshold uint32 `protobuf:"varint,2,opt,name=failure_threshold,json=failureThreshold" json:"failure_threshold,omitempty"`
	// When a healthy upstream cluster becomes unhealthy, duration to wait before
	// attempting to send requests to that upstream cluster.
	// format seconds.nanoseconds
	ResetTimeoutSeconds float64 `protobuf:"fixed64,3,opt,name=reset_timeout_seconds,json=resetTimeoutSeconds" json:"reset_timeout_seconds,omitempty"`
}

func (m *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) Reset() {
	*m = CircuitBreakerPolicy_SimpleCircuitBreakerPolicy{}
}
func (m *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) ProtoMessage() {}
func (*CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

func (m *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) GetSuccessThreshold() uint32 {
	if m != nil {
		return m.SuccessThreshold
	}
	return 0
}

func (m *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) GetFailureThreshold() uint32 {
	if m != nil {
		return m.FailureThreshold
	}
	return 0
}

func (m *CircuitBreakerPolicy_SimpleCircuitBreakerPolicy) GetResetTimeoutSeconds() float64 {
	if m != nil {
		return m.ResetTimeoutSeconds
	}
	return 0
}

// Faults can be injected into the API calls by the proxy, for testing the
// failure recovery capabilities of downstream services.  Faults include
// aborting the Http request from downstream service, delaying the proxying
// of request to the upstream clusters, or both.
type HttpFaultInjection struct {
	// Delay requests before forwarding to upstream cluster, emulating
	// various failures such as network issues, overloaded upstream service, etc.
	Delay *HttpFaultInjection_Delay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	// N.B. Both delay and abort can be specified simultaneously. Delay and
	// Abort are independent of one another. For e.g., if Delay is restricted
	// to 5% of requests while Abort is restricted to 10% of requests, the
	// 10% in abort specification applies to all requests directed to the
	// service. It may be the case that one or more requests being aborted
	// were also delayed.
	Abort *HttpFaultInjection_Abort `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
	// Only requests with these Http headers will be subjected to fault
	// injection
	Headers map[string]*StringMatch `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HttpFaultInjection) Reset()                    { *m = HttpFaultInjection{} }
func (m *HttpFaultInjection) String() string            { return proto.CompactTextString(m) }
func (*HttpFaultInjection) ProtoMessage()               {}
func (*HttpFaultInjection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *HttpFaultInjection) GetDelay() *HttpFaultInjection_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HttpFaultInjection) GetAbort() *HttpFaultInjection_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

func (m *HttpFaultInjection) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Either a fixed delay or exponential delay.
type HttpFaultInjection_Delay struct {
	// Types that are valid to be assigned to HttpDelayType:
	//	*HttpFaultInjection_Delay_FixedDelay
	//	*HttpFaultInjection_Delay_ExpDelay
	HttpDelayType isHttpFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	// Specify delay duration as part of Http request.
	// TODO: The semantics and syntax of the headers is undefined.
	OverrideHeaderName string `protobuf:"bytes,3,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *HttpFaultInjection_Delay) Reset()                    { *m = HttpFaultInjection_Delay{} }
func (m *HttpFaultInjection_Delay) String() string            { return proto.CompactTextString(m) }
func (*HttpFaultInjection_Delay) ProtoMessage()               {}
func (*HttpFaultInjection_Delay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 1} }

type isHttpFaultInjection_Delay_HttpDelayType interface {
	isHttpFaultInjection_Delay_HttpDelayType()
}

type HttpFaultInjection_Delay_FixedDelay struct {
	FixedDelay *HttpFaultInjection_FixedDelay `protobuf:"bytes,1,opt,name=fixed_delay,json=fixedDelay,oneof"`
}
type HttpFaultInjection_Delay_ExpDelay struct {
	ExpDelay *HttpFaultInjection_ExponentialDelay `protobuf:"bytes,2,opt,name=exp_delay,json=expDelay,oneof"`
}

func (*HttpFaultInjection_Delay_FixedDelay) isHttpFaultInjection_Delay_HttpDelayType() {}
func (*HttpFaultInjection_Delay_ExpDelay) isHttpFaultInjection_Delay_HttpDelayType()   {}

func (m *HttpFaultInjection_Delay) GetHttpDelayType() isHttpFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *HttpFaultInjection_Delay) GetFixedDelay() *HttpFaultInjection_FixedDelay {
	if x, ok := m.GetHttpDelayType().(*HttpFaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *HttpFaultInjection_Delay) GetExpDelay() *HttpFaultInjection_ExponentialDelay {
	if x, ok := m.GetHttpDelayType().(*HttpFaultInjection_Delay_ExpDelay); ok {
		return x.ExpDelay
	}
	return nil
}

func (m *HttpFaultInjection_Delay) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpFaultInjection_Delay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpFaultInjection_Delay_OneofMarshaler, _HttpFaultInjection_Delay_OneofUnmarshaler, _HttpFaultInjection_Delay_OneofSizer, []interface{}{
		(*HttpFaultInjection_Delay_FixedDelay)(nil),
		(*HttpFaultInjection_Delay_ExpDelay)(nil),
	}
}

func _HttpFaultInjection_Delay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HttpFaultInjection_Delay_FixedDelay:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedDelay); err != nil {
			return err
		}
	case *HttpFaultInjection_Delay_ExpDelay:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExpDelay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpFaultInjection_Delay.HttpDelayType has unexpected type %T", x)
	}
	return nil
}

func _HttpFaultInjection_Delay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpFaultInjection_Delay)
	switch tag {
	case 1: // http_delay_type.fixed_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpFaultInjection_FixedDelay)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HttpFaultInjection_Delay_FixedDelay{msg}
		return true, err
	case 2: // http_delay_type.exp_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpFaultInjection_ExponentialDelay)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HttpFaultInjection_Delay_ExpDelay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpFaultInjection_Delay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HttpFaultInjection_Delay_FixedDelay:
		s := proto.Size(x.FixedDelay)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpFaultInjection_Delay_ExpDelay:
		s := proto.Size(x.ExpDelay)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Add a fixed delay before forwarding the request to upstream cluster
type HttpFaultInjection_FixedDelay struct {
	// percentage of requests on which the delay will be injected
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// delay duration in seconds.nanoseconds
	FixedDelaySeconds float64 `protobuf:"fixed64,2,opt,name=fixed_delay_seconds,json=fixedDelaySeconds" json:"fixed_delay_seconds,omitempty"`
}

func (m *HttpFaultInjection_FixedDelay) Reset()         { *m = HttpFaultInjection_FixedDelay{} }
func (m *HttpFaultInjection_FixedDelay) String() string { return proto.CompactTextString(m) }
func (*HttpFaultInjection_FixedDelay) ProtoMessage()    {}
func (*HttpFaultInjection_FixedDelay) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 2}
}

func (m *HttpFaultInjection_FixedDelay) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HttpFaultInjection_FixedDelay) GetFixedDelaySeconds() float64 {
	if m != nil {
		return m.FixedDelaySeconds
	}
	return 0
}

// Add a delay (based on an exponential function) before forwarding the
// request to upstream cluster
type HttpFaultInjection_ExponentialDelay struct {
	// percentage of requests on which the delay will be injected
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// mean delay needed to derive the exponential delay values
	MeanDelaySeconds float64 `protobuf:"fixed64,2,opt,name=mean_delay_seconds,json=meanDelaySeconds" json:"mean_delay_seconds,omitempty"`
}

func (m *HttpFaultInjection_ExponentialDelay) Reset()         { *m = HttpFaultInjection_ExponentialDelay{} }
func (m *HttpFaultInjection_ExponentialDelay) String() string { return proto.CompactTextString(m) }
func (*HttpFaultInjection_ExponentialDelay) ProtoMessage()    {}
func (*HttpFaultInjection_ExponentialDelay) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 3}
}

func (m *HttpFaultInjection_ExponentialDelay) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HttpFaultInjection_ExponentialDelay) GetMeanDelaySeconds() float64 {
	if m != nil {
		return m.MeanDelaySeconds
	}
	return 0
}

// Abort Http request attempts and return error codes back to downstream
// service.
type HttpFaultInjection_Abort struct {
	// percentage of requests to be aborted with the error code provided.
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// Error code to use to abort the Http request. Requests can be aborted
	// either with Http/1.1 status codes | http2 error codes or gRPC status
	// codes.
	//
	// Types that are valid to be assigned to ErrorType:
	//	*HttpFaultInjection_Abort_GrpcStatus
	//	*HttpFaultInjection_Abort_Http2Error
	//	*HttpFaultInjection_Abort_HttpStatus
	ErrorType isHttpFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	// Specify abort code as part of Http request.
	// TODO: The semantics and syntax of the headers is undefined.
	OverrideHeaderName string `protobuf:"bytes,5,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *HttpFaultInjection_Abort) Reset()                    { *m = HttpFaultInjection_Abort{} }
func (m *HttpFaultInjection_Abort) String() string            { return proto.CompactTextString(m) }
func (*HttpFaultInjection_Abort) ProtoMessage()               {}
func (*HttpFaultInjection_Abort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 4} }

type isHttpFaultInjection_Abort_ErrorType interface {
	isHttpFaultInjection_Abort_ErrorType()
}

type HttpFaultInjection_Abort_GrpcStatus struct {
	GrpcStatus string `protobuf:"bytes,2,opt,name=grpc_status,json=grpcStatus,oneof"`
}
type HttpFaultInjection_Abort_Http2Error struct {
	Http2Error string `protobuf:"bytes,3,opt,name=http2_error,json=http2Error,oneof"`
}
type HttpFaultInjection_Abort_HttpStatus struct {
	HttpStatus uint32 `protobuf:"varint,4,opt,name=http_status,json=httpStatus,oneof"`
}

func (*HttpFaultInjection_Abort_GrpcStatus) isHttpFaultInjection_Abort_ErrorType() {}
func (*HttpFaultInjection_Abort_Http2Error) isHttpFaultInjection_Abort_ErrorType() {}
func (*HttpFaultInjection_Abort_HttpStatus) isHttpFaultInjection_Abort_ErrorType() {}

func (m *HttpFaultInjection_Abort) GetErrorType() isHttpFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *HttpFaultInjection_Abort) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HttpFaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := m.GetErrorType().(*HttpFaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (m *HttpFaultInjection_Abort) GetHttp2Error() string {
	if x, ok := m.GetErrorType().(*HttpFaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

func (m *HttpFaultInjection_Abort) GetHttpStatus() uint32 {
	if x, ok := m.GetErrorType().(*HttpFaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *HttpFaultInjection_Abort) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpFaultInjection_Abort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpFaultInjection_Abort_OneofMarshaler, _HttpFaultInjection_Abort_OneofUnmarshaler, _HttpFaultInjection_Abort_OneofSizer, []interface{}{
		(*HttpFaultInjection_Abort_GrpcStatus)(nil),
		(*HttpFaultInjection_Abort_Http2Error)(nil),
		(*HttpFaultInjection_Abort_HttpStatus)(nil),
	}
}

func _HttpFaultInjection_Abort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HttpFaultInjection_Abort_GrpcStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.GrpcStatus)
	case *HttpFaultInjection_Abort_Http2Error:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Http2Error)
	case *HttpFaultInjection_Abort_HttpStatus:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HttpStatus))
	case nil:
	default:
		return fmt.Errorf("HttpFaultInjection_Abort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _HttpFaultInjection_Abort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpFaultInjection_Abort)
	switch tag {
	case 2: // error_type.grpc_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HttpFaultInjection_Abort_GrpcStatus{x}
		return true, err
	case 3: // error_type.http2_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HttpFaultInjection_Abort_Http2Error{x}
		return true, err
	case 4: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &HttpFaultInjection_Abort_HttpStatus{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _HttpFaultInjection_Abort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HttpFaultInjection_Abort_GrpcStatus:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GrpcStatus)))
		n += len(x.GrpcStatus)
	case *HttpFaultInjection_Abort_Http2Error:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Http2Error)))
		n += len(x.Http2Error)
	case *HttpFaultInjection_Abort_HttpStatus:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Faults can be injected into the L4 traffic forwarded by the proxy, for
// testing the failure recovery capabilities of downstream services.
// Faults include terminating established Tcp connections, throttling the
// upstream/downstream bandwidth (for Tcp|Udp), or both.
type L4FaultInjection struct {
	// We first throttle (if set) and then terminate the connection.
	Throttle  *L4FaultInjection_Throttle  `protobuf:"bytes,1,opt,name=throttle" json:"throttle,omitempty"`
	Terminate *L4FaultInjection_Terminate `protobuf:"bytes,2,opt,name=terminate" json:"terminate,omitempty"`
}

func (m *L4FaultInjection) Reset()                    { *m = L4FaultInjection{} }
func (m *L4FaultInjection) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection) ProtoMessage()               {}
func (*L4FaultInjection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *L4FaultInjection) GetThrottle() *L4FaultInjection_Throttle {
	if m != nil {
		return m.Throttle
	}
	return nil
}

func (m *L4FaultInjection) GetTerminate() *L4FaultInjection_Terminate {
	if m != nil {
		return m.Terminate
	}
	return nil
}

// Bandwidth throttling for Tcp and Udp connections
type L4FaultInjection_Throttle struct {
	// percentage of connections to throttle.
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// bandwidth limit in "bits" per second between downstream and proxy
	DownstreamLimitBps uint64 `protobuf:"varint,2,opt,name=downstream_limit_bps,json=downstreamLimitBps" json:"downstream_limit_bps,omitempty"`
	// bandwidth limits in "bits" per second between proxy and upstream
	UpstreamLimitBps uint64 `protobuf:"varint,3,opt,name=upstream_limit_bps,json=upstreamLimitBps" json:"upstream_limit_bps,omitempty"`
	// Types that are valid to be assigned to ThrottleAfter:
	//	*L4FaultInjection_Throttle_ThrottleAfterSeconds
	//	*L4FaultInjection_Throttle_ThrottleAfterBytes
	ThrottleAfter isL4FaultInjection_Throttle_ThrottleAfter `protobuf_oneof:"throttle_after"`
	// Stop throttling after the given duration. If not set, the connection
	// will be throttled for its lifetime.
	ThrottleForSeconds *google_protobuf1.DoubleValue `protobuf:"bytes,6,opt,name=throttle_for_seconds,json=throttleForSeconds" json:"throttle_for_seconds,omitempty"`
}

func (m *L4FaultInjection_Throttle) Reset()                    { *m = L4FaultInjection_Throttle{} }
func (m *L4FaultInjection_Throttle) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection_Throttle) ProtoMessage()               {}
func (*L4FaultInjection_Throttle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type isL4FaultInjection_Throttle_ThrottleAfter interface {
	isL4FaultInjection_Throttle_ThrottleAfter()
}

type L4FaultInjection_Throttle_ThrottleAfterSeconds struct {
	ThrottleAfterSeconds float64 `protobuf:"fixed64,4,opt,name=throttle_after_seconds,json=throttleAfterSeconds,oneof"`
}
type L4FaultInjection_Throttle_ThrottleAfterBytes struct {
	ThrottleAfterBytes float64 `protobuf:"fixed64,5,opt,name=throttle_after_bytes,json=throttleAfterBytes,oneof"`
}

func (*L4FaultInjection_Throttle_ThrottleAfterSeconds) isL4FaultInjection_Throttle_ThrottleAfter() {}
func (*L4FaultInjection_Throttle_ThrottleAfterBytes) isL4FaultInjection_Throttle_ThrottleAfter()   {}

func (m *L4FaultInjection_Throttle) GetThrottleAfter() isL4FaultInjection_Throttle_ThrottleAfter {
	if m != nil {
		return m.ThrottleAfter
	}
	return nil
}

func (m *L4FaultInjection_Throttle) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetDownstreamLimitBps() uint64 {
	if m != nil {
		return m.DownstreamLimitBps
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetUpstreamLimitBps() uint64 {
	if m != nil {
		return m.UpstreamLimitBps
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetThrottleAfterSeconds() float64 {
	if x, ok := m.GetThrottleAfter().(*L4FaultInjection_Throttle_ThrottleAfterSeconds); ok {
		return x.ThrottleAfterSeconds
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetThrottleAfterBytes() float64 {
	if x, ok := m.GetThrottleAfter().(*L4FaultInjection_Throttle_ThrottleAfterBytes); ok {
		return x.ThrottleAfterBytes
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetThrottleForSeconds() *google_protobuf1.DoubleValue {
	if m != nil {
		return m.ThrottleForSeconds
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L4FaultInjection_Throttle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L4FaultInjection_Throttle_OneofMarshaler, _L4FaultInjection_Throttle_OneofUnmarshaler, _L4FaultInjection_Throttle_OneofSizer, []interface{}{
		(*L4FaultInjection_Throttle_ThrottleAfterSeconds)(nil),
		(*L4FaultInjection_Throttle_ThrottleAfterBytes)(nil),
	}
}

func _L4FaultInjection_Throttle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L4FaultInjection_Throttle)
	// throttle_after
	switch x := m.ThrottleAfter.(type) {
	case *L4FaultInjection_Throttle_ThrottleAfterSeconds:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.ThrottleAfterSeconds))
	case *L4FaultInjection_Throttle_ThrottleAfterBytes:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.ThrottleAfterBytes))
	case nil:
	default:
		return fmt.Errorf("L4FaultInjection_Throttle.ThrottleAfter has unexpected type %T", x)
	}
	return nil
}

func _L4FaultInjection_Throttle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L4FaultInjection_Throttle)
	switch tag {
	case 4: // throttle_after.throttle_after_seconds
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ThrottleAfter = &L4FaultInjection_Throttle_ThrottleAfterSeconds{math.Float64frombits(x)}
		return true, err
	case 5: // throttle_after.throttle_after_bytes
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ThrottleAfter = &L4FaultInjection_Throttle_ThrottleAfterBytes{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _L4FaultInjection_Throttle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L4FaultInjection_Throttle)
	// throttle_after
	switch x := m.ThrottleAfter.(type) {
	case *L4FaultInjection_Throttle_ThrottleAfterSeconds:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *L4FaultInjection_Throttle_ThrottleAfterBytes:
		n += proto.SizeVarint(5<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Abruptly reset (terminate) the Tcp connection after it has been
// established, emulating remote server crash or link failure.
type L4FaultInjection_Terminate struct {
	// percentage of established Tcp connections to be terminated/reset
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// TODO: see if it makes sense to create a generic Duration type to
	// express time interval related configs.
	TerminateAfterSeconds float64 `protobuf:"fixed64,2,opt,name=terminate_after_seconds,json=terminateAfterSeconds" json:"terminate_after_seconds,omitempty"`
}

func (m *L4FaultInjection_Terminate) Reset()                    { *m = L4FaultInjection_Terminate{} }
func (m *L4FaultInjection_Terminate) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection_Terminate) ProtoMessage()               {}
func (*L4FaultInjection_Terminate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 1} }

func (m *L4FaultInjection_Terminate) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *L4FaultInjection_Terminate) GetTerminateAfterSeconds() float64 {
	if m != nil {
		return m.TerminateAfterSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*ProxyConfig)(nil), "istio.proxy.v1alpha.config.ProxyConfig")
	proto.RegisterType((*RouteRule)(nil), "istio.proxy.v1alpha.config.RouteRule")
	proto.RegisterType((*L4RouteRule)(nil), "istio.proxy.v1alpha.config.L4RouteRule")
	proto.RegisterType((*HttpRouteRule)(nil), "istio.proxy.v1alpha.config.HttpRouteRule")
	proto.RegisterType((*L4MatchCondition)(nil), "istio.proxy.v1alpha.config.L4MatchCondition")
	proto.RegisterType((*L4MatchAttributes)(nil), "istio.proxy.v1alpha.config.L4MatchAttributes")
	proto.RegisterType((*ClusterIdentifier)(nil), "istio.proxy.v1alpha.config.ClusterIdentifier")
	proto.RegisterType((*WeightedCluster)(nil), "istio.proxy.v1alpha.config.WeightedCluster")
	proto.RegisterType((*HttpMatchCondition)(nil), "istio.proxy.v1alpha.config.HttpMatchCondition")
	proto.RegisterType((*StringMatch)(nil), "istio.proxy.v1alpha.config.StringMatch")
	proto.RegisterType((*UpstreamCluster)(nil), "istio.proxy.v1alpha.config.UpstreamCluster")
	proto.RegisterType((*LoadBalancingPolicy)(nil), "istio.proxy.v1alpha.config.LoadBalancingPolicy")
	proto.RegisterType((*TimeoutPolicy)(nil), "istio.proxy.v1alpha.config.TimeoutPolicy")
	proto.RegisterType((*TimeoutPolicy_SimpleTimeoutPolicy)(nil), "istio.proxy.v1alpha.config.TimeoutPolicy.SimpleTimeoutPolicy")
	proto.RegisterType((*RetryPolicy)(nil), "istio.proxy.v1alpha.config.RetryPolicy")
	proto.RegisterType((*RetryPolicy_SimpleRetryPolicy)(nil), "istio.proxy.v1alpha.config.RetryPolicy.SimpleRetryPolicy")
	proto.RegisterType((*CircuitBreakerPolicy)(nil), "istio.proxy.v1alpha.config.CircuitBreakerPolicy")
	proto.RegisterType((*CircuitBreakerPolicy_SimpleCircuitBreakerPolicy)(nil), "istio.proxy.v1alpha.config.CircuitBreakerPolicy.SimpleCircuitBreakerPolicy")
	proto.RegisterType((*HttpFaultInjection)(nil), "istio.proxy.v1alpha.config.HttpFaultInjection")
	proto.RegisterType((*HttpFaultInjection_Delay)(nil), "istio.proxy.v1alpha.config.HttpFaultInjection.Delay")
	proto.RegisterType((*HttpFaultInjection_FixedDelay)(nil), "istio.proxy.v1alpha.config.HttpFaultInjection.FixedDelay")
	proto.RegisterType((*HttpFaultInjection_ExponentialDelay)(nil), "istio.proxy.v1alpha.config.HttpFaultInjection.ExponentialDelay")
	proto.RegisterType((*HttpFaultInjection_Abort)(nil), "istio.proxy.v1alpha.config.HttpFaultInjection.Abort")
	proto.RegisterType((*L4FaultInjection)(nil), "istio.proxy.v1alpha.config.L4FaultInjection")
	proto.RegisterType((*L4FaultInjection_Throttle)(nil), "istio.proxy.v1alpha.config.L4FaultInjection.Throttle")
	proto.RegisterType((*L4FaultInjection_Terminate)(nil), "istio.proxy.v1alpha.config.L4FaultInjection.Terminate")
	proto.RegisterEnum("istio.proxy.v1alpha.config.L4MatchAttributes_L4Protocol", L4MatchAttributes_L4Protocol_name, L4MatchAttributes_L4Protocol_value)
	proto.RegisterEnum("istio.proxy.v1alpha.config.LoadBalancingPolicy_SimpleLBPolicy", LoadBalancingPolicy_SimpleLBPolicy_name, LoadBalancingPolicy_SimpleLBPolicy_value)
}

func init() { proto.RegisterFile("proxy/v1/config/cfg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x58, 0xdd, 0x6e, 0xe3, 0xc6,
	0x15, 0x16, 0x25, 0xcb, 0xb6, 0x8e, 0xfc, 0x23, 0x8f, 0xbd, 0x5b, 0x45, 0x28, 0x82, 0xad, 0x80,
	0x22, 0x5b, 0x24, 0xa5, 0x37, 0x8a, 0xb3, 0xc9, 0x36, 0x48, 0x03, 0xcb, 0xf6, 0x56, 0x4e, 0x1d,
	0xaf, 0x33, 0x96, 0xd3, 0x1f, 0xb4, 0x21, 0x28, 0x72, 0x24, 0x31, 0x4b, 0x91, 0xc4, 0xcc, 0xd0,
	0x6b, 0xbd, 0x42, 0x81, 0x3e, 0x40, 0x2f, 0xfa, 0x02, 0x45, 0x2f, 0xdb, 0xab, 0x5e, 0xf6, 0xae,
	0xbd, 0xeb, 0x8b, 0xec, 0x55, 0x7b, 0x57, 0xa0, 0x98, 0x1f, 0x52, 0xa4, 0x6c, 0x69, 0x25, 0x17,
	0x68, 0x91, 0x3b, 0xce, 0xf9, 0xf9, 0xe6, 0xcc, 0x77, 0xce, 0x19, 0x1e, 0x12, 0xde, 0x8a, 0x68,
	0x78, 0x33, 0xde, 0xbf, 0x7e, 0x7f, 0xdf, 0x09, 0x83, 0xbe, 0x37, 0xd8, 0x77, 0xfa, 0x03, 0x33,
	0xa2, 0x21, 0x0f, 0x51, 0xc3, 0x63, 0xdc, 0x0b, 0x4d, 0x69, 0x60, 0x5e, 0xbf, 0x6f, 0xfb, 0xd1,
	0xd0, 0x36, 0x95, 0x55, 0xe3, 0xad, 0x41, 0x18, 0x0e, 0x7c, 0xb2, 0x2f, 0x2d, 0x7b, 0x71, 0x7f,
	0xdf, 0x0e, 0xc6, 0xca, 0xad, 0xf1, 0xf6, 0xb4, 0xea, 0x15, 0xb5, 0xa3, 0x88, 0x50, 0xa6, 0xf4,
	0xcd, 0xbf, 0x1b, 0x50, 0xbd, 0x10, 0x98, 0x47, 0x12, 0x0a, 0x35, 0x60, 0x9d, 0x92, 0x6b, 0x8f,
	0x79, 0x61, 0x50, 0x37, 0x1e, 0x19, 0x8f, 0xcb, 0x38, 0x5d, 0xa3, 0xe7, 0x50, 0xa5, 0x61, 0xcc,
	0x89, 0x45, 0x63, 0x9f, 0xb0, 0x7a, 0xf1, 0x51, 0xe9, 0x71, 0xb5, 0xf5, 0x7d, 0x73, 0x76, 0x60,
	0x26, 0x16, 0xe6, 0x38, 0xf6, 0x09, 0x06, 0x9a, 0x3c, 0x32, 0xf4, 0x73, 0xd8, 0x89, 0x23, 0xc6,
	0x29, 0xb1, 0x47, 0x96, 0xe3, 0xc7, 0x8c, 0x13, 0xca, 0xea, 0x25, 0x89, 0xf6, 0xee, 0x3c, 0xb4,
	0x2b, 0xed, 0x74, 0xa4, 0x7c, 0x70, 0x2d, 0xce, 0x0b, 0x58, 0xf3, 0xf7, 0x06, 0x54, 0xd2, 0x3d,
	0xd1, 0x21, 0xac, 0xfa, 0xf6, 0x98, 0xd0, 0x03, 0x79, 0x92, 0x6a, 0xeb, 0x9d, 0x79, 0xe0, 0x67,
	0x07, 0xa9, 0x63, 0xa7, 0x80, 0xb5, 0x23, 0xfa, 0x0c, 0x56, 0x86, 0x9c, 0x47, 0xf5, 0xa2, 0x04,
	0xf8, 0xc1, 0x3c, 0x80, 0x0e, 0xe7, 0x51, 0x16, 0x42, 0x3a, 0xb6, 0x37, 0x00, 0x26, 0x9c, 0x35,
	0x5f, 0x1b, 0x50, 0xcd, 0x6c, 0x84, 0xda, 0x50, 0x1e, 0xd9, 0xdc, 0x19, 0xea, 0x00, 0xdf, 0x9b,
	0x1f, 0xe0, 0x17, 0xc2, 0xf4, 0x28, 0x0c, 0x5c, 0x8f, 0x7b, 0x61, 0x80, 0x95, 0xab, 0x60, 0xf3,
	0x15, 0xf1, 0x06, 0x43, 0x4e, 0xdc, 0x09, 0x9b, 0xc5, 0x37, 0xb3, 0xf9, 0x33, 0xed, 0x94, 0xb2,
	0xf9, 0x2a, 0x2f, 0x60, 0x22, 0xba, 0xbe, 0x1d, 0xfb, 0xbc, 0x5e, 0x5a, 0x24, 0xba, 0xe7, 0xc2,
	0xf4, 0x34, 0xf8, 0x86, 0x38, 0x2a, 0x3a, 0xe9, 0xda, 0xfc, 0x63, 0x11, 0x36, 0x73, 0xcc, 0xa0,
	0xe3, 0xfc, 0x99, 0xcd, 0x37, 0x71, 0xfa, 0xbf, 0x3e, 0xf5, 0x71, 0xfe, 0xd4, 0x6f, 0x8c, 0xef,
	0xce, 0x73, 0xa3, 0x0f, 0xa1, 0xea, 0xc4, 0x8c, 0x87, 0x23, 0xcb, 0x1b, 0x45, 0x7e, 0x7d, 0x45,
	0x62, 0xed, 0x99, 0xaa, 0x1b, 0xcd, 0xa4, 0x1b, 0xcd, 0xc3, 0x60, 0x8c, 0x41, 0x19, 0x9e, 0x8e,
	0x22, 0xbf, 0xf9, 0x67, 0x03, 0x6a, 0xd3, 0x89, 0x46, 0x5f, 0xc2, 0x86, 0x7f, 0x60, 0x73, 0x4e,
	0xbd, 0x5e, 0xcc, 0x09, 0xd3, 0xc4, 0xfd, 0x70, 0x81, 0x62, 0x39, 0x4c, 0x9d, 0x70, 0x0e, 0x02,
	0x9d, 0x43, 0x95, 0x51, 0x27, 0x61, 0x4e, 0x97, 0xf7, 0x5c, 0x44, 0xcd, 0xcf, 0xa9, 0x4b, 0x02,
	0xee, 0xf5, 0x3d, 0x42, 0x31, 0x30, 0xea, 0x68, 0x69, 0xf3, 0xaf, 0x45, 0xd8, 0xb9, 0xb5, 0x27,
	0x6a, 0xc2, 0xa6, 0xd8, 0xc5, 0x8b, 0x2c, 0x16, 0xf7, 0x02, 0xc2, 0xeb, 0xc6, 0xa3, 0xd2, 0xe3,
	0x0a, 0x16, 0x5b, 0x9f, 0x46, 0x97, 0x52, 0x84, 0x3e, 0x82, 0x75, 0x61, 0x13, 0x85, 0x94, 0xeb,
	0x30, 0xbe, 0x7b, 0x8b, 0xa5, 0xab, 0xd3, 0x80, 0x7f, 0xd0, 0xfa, 0xca, 0xf6, 0x63, 0x82, 0xd7,
	0x18, 0x75, 0x2e, 0x42, 0xca, 0x05, 0xb8, 0xcb, 0x78, 0x06, 0xbc, 0xa4, 0xc0, 0x5d, 0xc6, 0xb3,
	0xe0, 0xc2, 0x46, 0x82, 0xaf, 0x2c, 0x02, 0xee, 0x32, 0x2e, 0xc1, 0xbb, 0xb0, 0x2e, 0x0d, 0x9c,
	0xd0, 0xaf, 0x97, 0x1f, 0x19, 0x8f, 0xb7, 0x5a, 0x1f, 0x2f, 0x45, 0xb7, 0x79, 0x76, 0x70, 0xa1,
	0xfd, 0x71, 0x8a, 0xd4, 0x7c, 0x1b, 0x60, 0x22, 0x47, 0x6b, 0x50, 0xea, 0x1e, 0x5d, 0xd4, 0x0a,
	0xe2, 0xe1, 0xea, 0xf8, 0xa2, 0x66, 0x34, 0x3f, 0x81, 0x9d, 0x5b, 0x34, 0x23, 0x04, 0x2b, 0x81,
	0x3d, 0x22, 0x32, 0xeb, 0x15, 0x2c, 0x9f, 0x85, 0x8c, 0xdb, 0x03, 0x55, 0xf0, 0x15, 0x2c, 0x9f,
	0x9b, 0x63, 0xd8, 0x9e, 0x2a, 0x6e, 0x91, 0x65, 0x71, 0xfc, 0x24, 0xcb, 0xc6, 0xbd, 0xb2, 0xec,
	0x32, 0x9e, 0xe0, 0x3d, 0x84, 0x55, 0xd5, 0x2e, 0x32, 0x53, 0x9b, 0x58, 0xaf, 0x9a, 0xbf, 0x5d,
	0x01, 0x74, 0xbb, 0x55, 0xbf, 0x05, 0x75, 0x2b, 0x4e, 0xc4, 0x9c, 0x21, 0x19, 0x11, 0xd9, 0xed,
	0x15, 0xac, 0x57, 0xe8, 0x04, 0x2a, 0x76, 0xcc, 0x87, 0x21, 0xf5, 0xf8, 0x58, 0x57, 0xce, 0xdc,
	0xb7, 0xc7, 0x25, 0xa7, 0x5e, 0x30, 0x90, 0xb1, 0xe3, 0x89, 0x27, 0x7a, 0x06, 0xa5, 0x98, 0x7a,
	0xb2, 0x82, 0x96, 0x00, 0x10, 0x3e, 0xe8, 0x0a, 0xd6, 0x86, 0xc4, 0x76, 0xc5, 0xb5, 0xb6, 0x2a,
	0xaf, 0xb5, 0x4f, 0x96, 0xbb, 0x28, 0xcd, 0x8e, 0xf2, 0x3e, 0x09, 0x38, 0x1d, 0xe3, 0x04, 0xab,
	0xe1, 0xc0, 0x46, 0x56, 0x81, 0x6a, 0x50, 0x7a, 0x49, 0xc6, 0xba, 0xb8, 0xc4, 0x23, 0xfa, 0x14,
	0xca, 0xd7, 0xa2, 0x19, 0x34, 0xb9, 0x0b, 0x47, 0xad, 0xbc, 0x7e, 0x54, 0xfc, 0xd8, 0x68, 0x12,
	0xa8, 0x66, 0x34, 0xe8, 0x21, 0x94, 0xc9, 0x8d, 0xed, 0x70, 0xb5, 0x4b, 0xa7, 0x80, 0xd5, 0x12,
	0xd5, 0x61, 0x35, 0xa2, 0xa4, 0xef, 0xdd, 0xc8, 0xad, 0x84, 0x42, 0xaf, 0x85, 0x07, 0x25, 0x03,
	0x72, 0xa3, 0xb2, 0x22, 0x3c, 0xe4, 0x52, 0xbc, 0x4d, 0xe5, 0xf5, 0x6f, 0xf1, 0x71, 0x44, 0x9a,
	0x7f, 0x29, 0xc1, 0xf6, 0xd4, 0x4c, 0x80, 0x7e, 0x02, 0x6b, 0xff, 0x55, 0xb9, 0x27, 0xde, 0xa8,
	0x05, 0x0f, 0x86, 0xc4, 0xf6, 0xf9, 0xd0, 0x72, 0x86, 0xc4, 0x79, 0x69, 0x91, 0xc0, 0x8d, 0x42,
	0x2f, 0x50, 0xa5, 0x5f, 0xc1, 0xbb, 0x4a, 0x79, 0x24, 0x74, 0x27, 0x5a, 0x85, 0xce, 0xa0, 0xe2,
	0xf7, 0xac, 0x28, 0xf4, 0x3d, 0x67, 0xac, 0x5f, 0x1f, 0xfb, 0x73, 0xab, 0x3d, 0xb4, 0xdd, 0xb6,
	0xed, 0xdb, 0x81, 0xe3, 0x05, 0x83, 0x0b, 0xe9, 0x86, 0xd7, 0xfd, 0x9e, 0x7a, 0x42, 0x47, 0xb0,
	0xc6, 0xbd, 0x11, 0x09, 0xe3, 0xe4, 0xee, 0x9a, 0x3b, 0x7e, 0x74, 0x95, 0xa9, 0x46, 0x49, 0x3c,
	0x45, 0x36, 0x29, 0xe1, 0x74, 0xbc, 0x48, 0x0d, 0x62, 0x61, 0xa8, 0x01, 0x94, 0x17, 0xfa, 0x05,
	0x6c, 0x3b, 0x1e, 0x75, 0x62, 0x8f, 0x5b, 0x3d, 0x4a, 0xec, 0x97, 0x84, 0xd6, 0x57, 0x25, 0xd0,
	0x93, 0xb9, 0xb4, 0x2a, 0x97, 0xb6, 0xf2, 0xd0, 0x88, 0x5b, 0x4e, 0x4e, 0xda, 0xfc, 0xb7, 0x01,
	0xbb, 0x77, 0x10, 0x80, 0xba, 0x99, 0xfb, 0x6e, 0xab, 0xf5, 0xe3, 0x25, 0xf9, 0x33, 0x2f, 0xc5,
	0xfb, 0x96, 0x9c, 0xb5, 0xd5, 0x52, 0xcc, 0x61, 0xf2, 0xc6, 0xfc, 0x28, 0xff, 0x3e, 0x2e, 0xce,
	0x7e, 0x1f, 0x77, 0x0a, 0xb9, 0x37, 0xf2, 0xe7, 0xb0, 0x95, 0x87, 0x44, 0xdb, 0x50, 0xc5, 0x2f,
	0xae, 0xce, 0x8f, 0x2d, 0xfc, 0xa2, 0x7d, 0x7a, 0x5e, 0x2b, 0xa0, 0x2d, 0x80, 0xb3, 0x93, 0xc3,
	0xcb, 0xae, 0x75, 0xf4, 0xe2, 0xfc, 0xbc, 0x66, 0xa0, 0x2a, 0xac, 0x9d, 0x5e, 0x58, 0x9d, 0xc3,
	0xcb, 0x4e, 0xad, 0x88, 0x00, 0x56, 0xf1, 0xe1, 0xf9, 0xf1, 0x8b, 0x2f, 0x6a, 0xa5, 0x76, 0x35,
	0x53, 0x1f, 0xcd, 0x3f, 0x15, 0x61, 0x33, 0x97, 0x34, 0xd4, 0x87, 0x2d, 0x26, 0xb7, 0xb2, 0x92,
	0xbc, 0xab, 0x12, 0xfe, 0x74, 0xe1, 0xbc, 0xeb, 0xd3, 0xe7, 0x64, 0x9d, 0x02, 0xde, 0x64, 0x59,
	0xf1, 0xbd, 0xb9, 0x68, 0x44, 0xb0, 0x7b, 0xc7, 0x06, 0xe8, 0x1d, 0xd8, 0xd6, 0x01, 0x5b, 0x8c,
	0x38, 0x61, 0xe0, 0xaa, 0xab, 0xde, 0xc0, 0x5b, 0x5a, 0x7c, 0xa9, 0xa4, 0xe8, 0x09, 0xec, 0x85,
	0xd7, 0x84, 0x52, 0xcf, 0x25, 0x96, 0xba, 0x90, 0x2c, 0x99, 0x6a, 0xd5, 0x52, 0x28, 0xd1, 0xa9,
	0x0b, 0xea, 0xdc, 0x1e, 0x91, 0x76, 0x0d, 0x12, 0x8c, 0x84, 0xb6, 0xdf, 0x15, 0xa1, 0x9a, 0x29,
	0x54, 0xf4, 0x35, 0x6c, 0x68, 0xd2, 0x54, 0x9d, 0x2b, 0xca, 0x9e, 0x2d, 0x58, 0xe7, 0x9a, 0xb0,
	0x8c, 0xa4, 0x53, 0xc0, 0x55, 0x36, 0x11, 0xde, 0x9f, 0x2c, 0x1b, 0x76, 0x6e, 0x81, 0x8b, 0xcf,
	0x2b, 0x9b, 0x73, 0x32, 0x8a, 0xb8, 0xe2, 0x68, 0x13, 0xa7, 0xeb, 0x7b, 0xb0, 0xb3, 0x05, 0x1b,
	0xf2, 0xd0, 0x09, 0x37, 0xff, 0x2c, 0xc2, 0xde, 0x5d, 0xbd, 0x87, 0xbe, 0x81, 0x8a, 0x26, 0xc9,
	0xe9, 0x69, 0x86, 0x7e, 0xba, 0x6c, 0x03, 0x6b, 0xaa, 0xee, 0x52, 0x75, 0x0a, 0x78, 0x5d, 0xe1,
	0x1f, 0xf5, 0xee, 0x4f, 0xd8, 0x1f, 0x0c, 0x68, 0xcc, 0xde, 0x03, 0xbd, 0x0b, 0x3b, 0x2c, 0x76,
	0x1c, 0xc2, 0x98, 0xc5, 0x87, 0x94, 0xb0, 0x61, 0xe8, 0xbb, 0x9a, 0xc3, 0x9a, 0x56, 0x74, 0x13,
	0xb9, 0x30, 0xee, 0xdb, 0x9e, 0x1f, 0x53, 0x92, 0x31, 0x56, 0x43, 0x4b, 0x4d, 0x2b, 0x26, 0xc6,
	0x2d, 0x78, 0x40, 0x09, 0x23, 0xdc, 0x9a, 0xae, 0xe2, 0x92, 0xac, 0xe2, 0x5d, 0xa9, 0xec, 0xe6,
	0x4a, 0x59, 0xb4, 0xb2, 0x93, 0xb6, 0xf2, 0xbf, 0xd6, 0xd4, 0xfc, 0x93, 0xff, 0x14, 0x40, 0x9f,
	0x43, 0xd9, 0x25, 0xbe, 0x9d, 0xd4, 0xe4, 0xc1, 0x72, 0x5f, 0x12, 0xe6, 0xb1, 0xf0, 0xc5, 0x0a,
	0x42, 0x60, 0xd9, 0xbd, 0xc9, 0x8c, 0xbc, 0x2c, 0xd6, 0xa1, 0xf0, 0xc5, 0x0a, 0x22, 0x3b, 0x5a,
	0x94, 0x16, 0x1b, 0x2d, 0xa6, 0xd0, 0xfe, 0x7f, 0xa3, 0x45, 0xe3, 0x37, 0x45, 0x28, 0x4b, 0x62,
	0xd0, 0xaf, 0xa0, 0xda, 0xf7, 0x6e, 0x88, 0x6b, 0x65, 0x39, 0x7e, 0xb6, 0xe4, 0x49, 0x9e, 0x0b,
	0x04, 0x89, 0x27, 0x8a, 0xb1, 0x9f, 0xae, 0xd0, 0xd7, 0x50, 0x21, 0x37, 0x91, 0xc6, 0x56, 0xe1,
	0x7e, 0xb6, 0x24, 0xf6, 0xc9, 0x4d, 0x14, 0x06, 0x62, 0xb0, 0xb0, 0xfd, 0x64, 0x87, 0x75, 0x72,
	0x13, 0x29, 0xfc, 0x59, 0xcd, 0x5e, 0x9a, 0xd9, 0xec, 0x3b, 0xb0, 0x3d, 0xe4, 0x5c, 0x87, 0x24,
	0x07, 0xa0, 0xc6, 0x57, 0x00, 0x93, 0x03, 0xa0, 0x3a, 0xac, 0x45, 0x84, 0x3a, 0x24, 0x50, 0xef,
	0x8d, 0x22, 0x4e, 0x96, 0xc8, 0x84, 0xdd, 0x0c, 0x55, 0x69, 0x79, 0x17, 0x65, 0x79, 0xef, 0x4c,
	0x4e, 0xad, 0x8b, 0xbb, 0xf1, 0x4b, 0xa8, 0x4d, 0x07, 0x3f, 0x07, 0xfd, 0x3d, 0x40, 0x23, 0x62,
	0x07, 0x77, 0x82, 0xd7, 0x84, 0x26, 0x87, 0xfd, 0x37, 0x03, 0xca, 0xb2, 0x1a, 0xe7, 0x20, 0x7e,
	0x0f, 0xaa, 0x03, 0x1a, 0x39, 0x16, 0xe3, 0x36, 0x8f, 0x59, 0x3a, 0x1d, 0x82, 0x10, 0x5e, 0x4a,
	0x99, 0x30, 0x11, 0x6c, 0xb4, 0x2c, 0x42, 0x69, 0x48, 0xd3, 0x39, 0x11, 0xa4, 0xf0, 0x44, 0xc8,
	0x12, 0x93, 0x04, 0x45, 0xcc, 0x50, 0x9b, 0x89, 0x89, 0x46, 0x99, 0x95, 0x85, 0xf2, 0xcc, 0x2c,
	0x6c, 0x00, 0xc8, 0x1d, 0xd5, 0x04, 0xfa, 0x7a, 0x45, 0x7c, 0xae, 0x4f, 0xb5, 0xfd, 0x97, 0xb0,
	0xce, 0x87, 0x34, 0xe4, 0xdc, 0x27, 0xba, 0x2a, 0x3f, 0x5c, 0xe6, 0xcf, 0x89, 0xd9, 0xd5, 0xce,
	0x38, 0x85, 0x41, 0x5d, 0xa8, 0x70, 0x42, 0x47, 0x5e, 0x60, 0xf3, 0xa4, 0x79, 0x9e, 0x2e, 0x87,
	0x99, 0x78, 0xe3, 0x09, 0x50, 0xe3, 0x1f, 0x45, 0x58, 0x4f, 0x36, 0x9b, 0x93, 0x8d, 0x27, 0xb0,
	0xe7, 0x86, 0xaf, 0x02, 0xfd, 0xc3, 0xce, 0xf7, 0x46, 0x62, 0x18, 0x8c, 0x54, 0x5a, 0x56, 0x30,
	0x9a, 0xe8, 0xce, 0x84, 0xaa, 0x1d, 0x31, 0x51, 0x11, 0xe9, 0x0f, 0xbe, 0x89, 0x7d, 0x49, 0xda,
	0xa7, 0x3f, 0xed, 0x52, 0xeb, 0xa7, 0xf0, 0x30, 0x39, 0xa8, 0x65, 0xf7, 0x39, 0xa1, 0x69, 0x0d,
	0x89, 0x94, 0x19, 0x9d, 0x02, 0xde, 0x4b, 0xf4, 0x87, 0x42, 0x9d, 0x4c, 0x13, 0x2d, 0xd8, 0x9b,
	0xf2, 0xeb, 0x8d, 0xc5, 0x67, 0x66, 0x59, 0x7b, 0xa1, 0x9c, 0x57, 0x7b, 0xac, 0xbe, 0x1f, 0x27,
	0x3e, 0xfd, 0x70, 0xb2, 0xd3, 0xea, 0x8c, 0x9f, 0x03, 0xc7, 0x61, 0xdc, 0xf3, 0x89, 0xfa, 0x39,
	0x90, 0xe2, 0x3d, 0x0f, 0x93, 0x18, 0xe4, 0x7c, 0x92, 0x8b, 0xa1, 0xf1, 0x6b, 0xa8, 0xa4, 0x64,
	0xcf, 0x21, 0xf5, 0x29, 0x7c, 0x27, 0x4d, 0xc4, 0xd4, 0xa9, 0x55, 0xe7, 0x3c, 0x48, 0xd5, 0xd9,
	0x43, 0xf7, 0x56, 0x65, 0x68, 0x1f, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x21, 0x97, 0x73,
	0x2a, 0x16, 0x00, 0x00,
}
